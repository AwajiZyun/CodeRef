/* soapC.cpp
   Generated by gSOAP 2.8.82 for weather.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.82 2019-04-02 07:09:24 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_WS1__ArrayOfString:
		return soap_in_WS1__ArrayOfString(soap, tag, NULL, "WS1:ArrayOfString");
	case SOAP_TYPE_PointerTo_WS1__getVersionTime:
		return soap_in_PointerTo_WS1__getVersionTime(soap, tag, NULL, "WS1:getVersionTime");
	case SOAP_TYPE_PointerTo_WS1__getGeoIPContext:
		return soap_in_PointerTo_WS1__getGeoIPContext(soap, tag, NULL, "WS1:getGeoIPContext");
	case SOAP_TYPE_PointerTo_WS1__getCountryCityByIp:
		return soap_in_PointerTo_WS1__getCountryCityByIp(soap, tag, NULL, "WS1:getCountryCityByIp");
	case SOAP_TYPE_PointerTo_WS1__getWeatherbyCityNamePro:
		return soap_in_PointerTo_WS1__getWeatherbyCityNamePro(soap, tag, NULL, "WS1:getWeatherbyCityNamePro");
	case SOAP_TYPE_PointerTo_WS1__getWeatherbyCityName:
		return soap_in_PointerTo_WS1__getWeatherbyCityName(soap, tag, NULL, "WS1:getWeatherbyCityName");
	case SOAP_TYPE_PointerTo_WS1__getSupportDataSet:
		return soap_in_PointerTo_WS1__getSupportDataSet(soap, tag, NULL, "WS1:getSupportDataSet");
	case SOAP_TYPE_PointerTo_WS1__getSupportProvince:
		return soap_in_PointerTo_WS1__getSupportProvince(soap, tag, NULL, "WS1:getSupportProvince");
	case SOAP_TYPE_PointerTo_WS1__getSupportCity:
		return soap_in_PointerTo_WS1__getSupportCity(soap, tag, NULL, "WS1:getSupportCity");
	case SOAP_TYPE_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult:
		return soap_in_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, NULL, "WS1:getSupportDataSetResponse-getSupportDataSetResult");
	case SOAP_TYPE_PointerToWS1__ArrayOfString:
		return soap_in_PointerToWS1__ArrayOfString(soap, tag, NULL, "WS1:ArrayOfString");
	case SOAP_TYPE_wstring:
	{	wchar_t **s;
		s = soap_in_wstring(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:ArrayOfString"))
		{	*type = SOAP_TYPE_WS1__ArrayOfString;
			return soap_in_WS1__ArrayOfString(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	wchar_t **s;
			*type = SOAP_TYPE_wstring;
			s = soap_in_wstring(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "WS1:getSupportDataSetResponse-getSupportDataSetResult"))
		{	*type = SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult;
			return soap_in__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getVersionTimeResponse"))
		{	*type = SOAP_TYPE__WS1__getVersionTimeResponse;
			return soap_in__WS1__getVersionTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getVersionTime"))
		{	*type = SOAP_TYPE__WS1__getVersionTime;
			return soap_in__WS1__getVersionTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getGeoIPContextResponse"))
		{	*type = SOAP_TYPE__WS1__getGeoIPContextResponse;
			return soap_in__WS1__getGeoIPContextResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getGeoIPContext"))
		{	*type = SOAP_TYPE__WS1__getGeoIPContext;
			return soap_in__WS1__getGeoIPContext(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getCountryCityByIpResponse"))
		{	*type = SOAP_TYPE__WS1__getCountryCityByIpResponse;
			return soap_in__WS1__getCountryCityByIpResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getCountryCityByIp"))
		{	*type = SOAP_TYPE__WS1__getCountryCityByIp;
			return soap_in__WS1__getCountryCityByIp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:DataSet"))
		{	*type = SOAP_TYPE__WS1__DataSet;
			return soap_in__WS1__DataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getWeatherbyCityNameProResponse"))
		{	*type = SOAP_TYPE__WS1__getWeatherbyCityNameProResponse;
			return soap_in__WS1__getWeatherbyCityNameProResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getWeatherbyCityNamePro"))
		{	*type = SOAP_TYPE__WS1__getWeatherbyCityNamePro;
			return soap_in__WS1__getWeatherbyCityNamePro(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getWeatherbyCityNameResponse"))
		{	*type = SOAP_TYPE__WS1__getWeatherbyCityNameResponse;
			return soap_in__WS1__getWeatherbyCityNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getWeatherbyCityName"))
		{	*type = SOAP_TYPE__WS1__getWeatherbyCityName;
			return soap_in__WS1__getWeatherbyCityName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getSupportDataSetResponse"))
		{	*type = SOAP_TYPE__WS1__getSupportDataSetResponse;
			return soap_in__WS1__getSupportDataSetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getSupportDataSet"))
		{	*type = SOAP_TYPE__WS1__getSupportDataSet;
			return soap_in__WS1__getSupportDataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getSupportProvinceResponse"))
		{	*type = SOAP_TYPE__WS1__getSupportProvinceResponse;
			return soap_in__WS1__getSupportProvinceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getSupportProvince"))
		{	*type = SOAP_TYPE__WS1__getSupportProvince;
			return soap_in__WS1__getSupportProvince(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getSupportCityResponse"))
		{	*type = SOAP_TYPE__WS1__getSupportCityResponse;
			return soap_in__WS1__getSupportCityResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WS1:getSupportCity"))
		{	*type = SOAP_TYPE__WS1__getSupportCity;
			return soap_in__WS1__getSupportCity(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult:
		return ((_WS1__getSupportDataSetResponse_getSupportDataSetResult *)ptr)->soap_out(soap, "WS1:getSupportDataSetResponse-getSupportDataSetResult", id, "");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE__WS1__getVersionTimeResponse:
		return ((_WS1__getVersionTimeResponse *)ptr)->soap_out(soap, "WS1:getVersionTimeResponse", id, "");
	case SOAP_TYPE__WS1__getVersionTime:
		return ((_WS1__getVersionTime *)ptr)->soap_out(soap, "WS1:getVersionTime", id, "");
	case SOAP_TYPE__WS1__getGeoIPContextResponse:
		return ((_WS1__getGeoIPContextResponse *)ptr)->soap_out(soap, "WS1:getGeoIPContextResponse", id, "");
	case SOAP_TYPE__WS1__getGeoIPContext:
		return ((_WS1__getGeoIPContext *)ptr)->soap_out(soap, "WS1:getGeoIPContext", id, "");
	case SOAP_TYPE__WS1__getCountryCityByIpResponse:
		return ((_WS1__getCountryCityByIpResponse *)ptr)->soap_out(soap, "WS1:getCountryCityByIpResponse", id, "");
	case SOAP_TYPE__WS1__getCountryCityByIp:
		return ((_WS1__getCountryCityByIp *)ptr)->soap_out(soap, "WS1:getCountryCityByIp", id, "");
	case SOAP_TYPE__WS1__DataSet:
		return ((_WS1__DataSet *)ptr)->soap_out(soap, "WS1:DataSet", id, "");
	case SOAP_TYPE__WS1__getWeatherbyCityNameProResponse:
		return ((_WS1__getWeatherbyCityNameProResponse *)ptr)->soap_out(soap, "WS1:getWeatherbyCityNameProResponse", id, "");
	case SOAP_TYPE__WS1__getWeatherbyCityNamePro:
		return ((_WS1__getWeatherbyCityNamePro *)ptr)->soap_out(soap, "WS1:getWeatherbyCityNamePro", id, "");
	case SOAP_TYPE__WS1__getWeatherbyCityNameResponse:
		return ((_WS1__getWeatherbyCityNameResponse *)ptr)->soap_out(soap, "WS1:getWeatherbyCityNameResponse", id, "");
	case SOAP_TYPE__WS1__getWeatherbyCityName:
		return ((_WS1__getWeatherbyCityName *)ptr)->soap_out(soap, "WS1:getWeatherbyCityName", id, "");
	case SOAP_TYPE__WS1__getSupportDataSetResponse:
		return ((_WS1__getSupportDataSetResponse *)ptr)->soap_out(soap, "WS1:getSupportDataSetResponse", id, "");
	case SOAP_TYPE__WS1__getSupportDataSet:
		return ((_WS1__getSupportDataSet *)ptr)->soap_out(soap, "WS1:getSupportDataSet", id, "");
	case SOAP_TYPE__WS1__getSupportProvinceResponse:
		return ((_WS1__getSupportProvinceResponse *)ptr)->soap_out(soap, "WS1:getSupportProvinceResponse", id, "");
	case SOAP_TYPE__WS1__getSupportProvince:
		return ((_WS1__getSupportProvince *)ptr)->soap_out(soap, "WS1:getSupportProvince", id, "");
	case SOAP_TYPE__WS1__getSupportCityResponse:
		return ((_WS1__getSupportCityResponse *)ptr)->soap_out(soap, "WS1:getSupportCityResponse", id, "");
	case SOAP_TYPE__WS1__getSupportCity:
		return ((_WS1__getSupportCity *)ptr)->soap_out(soap, "WS1:getSupportCity", id, "");
	case SOAP_TYPE_WS1__ArrayOfString:
		return ((WS1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "WS1:ArrayOfString");
	case SOAP_TYPE_PointerTo_WS1__getVersionTime:
		return soap_out_PointerTo_WS1__getVersionTime(soap, tag, id, (_WS1__getVersionTime *const*)ptr, "WS1:getVersionTime");
	case SOAP_TYPE_PointerTo_WS1__getGeoIPContext:
		return soap_out_PointerTo_WS1__getGeoIPContext(soap, tag, id, (_WS1__getGeoIPContext *const*)ptr, "WS1:getGeoIPContext");
	case SOAP_TYPE_PointerTo_WS1__getCountryCityByIp:
		return soap_out_PointerTo_WS1__getCountryCityByIp(soap, tag, id, (_WS1__getCountryCityByIp *const*)ptr, "WS1:getCountryCityByIp");
	case SOAP_TYPE_PointerTo_WS1__getWeatherbyCityNamePro:
		return soap_out_PointerTo_WS1__getWeatherbyCityNamePro(soap, tag, id, (_WS1__getWeatherbyCityNamePro *const*)ptr, "WS1:getWeatherbyCityNamePro");
	case SOAP_TYPE_PointerTo_WS1__getWeatherbyCityName:
		return soap_out_PointerTo_WS1__getWeatherbyCityName(soap, tag, id, (_WS1__getWeatherbyCityName *const*)ptr, "WS1:getWeatherbyCityName");
	case SOAP_TYPE_PointerTo_WS1__getSupportDataSet:
		return soap_out_PointerTo_WS1__getSupportDataSet(soap, tag, id, (_WS1__getSupportDataSet *const*)ptr, "WS1:getSupportDataSet");
	case SOAP_TYPE_PointerTo_WS1__getSupportProvince:
		return soap_out_PointerTo_WS1__getSupportProvince(soap, tag, id, (_WS1__getSupportProvince *const*)ptr, "WS1:getSupportProvince");
	case SOAP_TYPE_PointerTo_WS1__getSupportCity:
		return soap_out_PointerTo_WS1__getSupportCity(soap, tag, id, (_WS1__getSupportCity *const*)ptr, "WS1:getSupportCity");
	case SOAP_TYPE_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult:
		return soap_out_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, id, (_WS1__getSupportDataSetResponse_getSupportDataSetResult *const*)ptr, "WS1:getSupportDataSetResponse-getSupportDataSetResult");
	case SOAP_TYPE_PointerToWS1__ArrayOfString:
		return soap_out_PointerToWS1__ArrayOfString(soap, tag, id, (WS1__ArrayOfString *const*)ptr, "WS1:ArrayOfString");
	case SOAP_TYPE_wstring:
		return soap_out_wstring(soap, tag, id, (wchar_t*const*)(void*)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult:
		((_WS1__getSupportDataSetResponse_getSupportDataSetResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE__WS1__getVersionTimeResponse:
		((_WS1__getVersionTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getVersionTime:
		((_WS1__getVersionTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getGeoIPContextResponse:
		((_WS1__getGeoIPContextResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getGeoIPContext:
		((_WS1__getGeoIPContext *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getCountryCityByIpResponse:
		((_WS1__getCountryCityByIpResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getCountryCityByIp:
		((_WS1__getCountryCityByIp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__DataSet:
		((_WS1__DataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNameProResponse:
		((_WS1__getWeatherbyCityNameProResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNamePro:
		((_WS1__getWeatherbyCityNamePro *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNameResponse:
		((_WS1__getWeatherbyCityNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityName:
		((_WS1__getWeatherbyCityName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getSupportDataSetResponse:
		((_WS1__getSupportDataSetResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getSupportDataSet:
		((_WS1__getSupportDataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getSupportProvinceResponse:
		((_WS1__getSupportProvinceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getSupportProvince:
		((_WS1__getSupportProvince *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getSupportCityResponse:
		((_WS1__getSupportCityResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WS1__getSupportCity:
		((_WS1__getSupportCity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS1__ArrayOfString:
		((WS1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___WS1__getVersionTime_:
		soap_serialize___WS1__getVersionTime_(soap, (const struct __WS1__getVersionTime_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getGeoIPContext_:
		soap_serialize___WS1__getGeoIPContext_(soap, (const struct __WS1__getGeoIPContext_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getCountryCityByIp_:
		soap_serialize___WS1__getCountryCityByIp_(soap, (const struct __WS1__getCountryCityByIp_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getVersionTime:
		soap_serialize___WS1__getVersionTime(soap, (const struct __WS1__getVersionTime *)ptr);
		break;
	case SOAP_TYPE___WS1__getGeoIPContext:
		soap_serialize___WS1__getGeoIPContext(soap, (const struct __WS1__getGeoIPContext *)ptr);
		break;
	case SOAP_TYPE___WS1__getCountryCityByIp:
		soap_serialize___WS1__getCountryCityByIp(soap, (const struct __WS1__getCountryCityByIp *)ptr);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro_:
		soap_serialize___WS1__getWeatherbyCityNamePro_(soap, (const struct __WS1__getWeatherbyCityNamePro_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityName_:
		soap_serialize___WS1__getWeatherbyCityName_(soap, (const struct __WS1__getWeatherbyCityName_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getSupportDataSet_:
		soap_serialize___WS1__getSupportDataSet_(soap, (const struct __WS1__getSupportDataSet_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getSupportProvince_:
		soap_serialize___WS1__getSupportProvince_(soap, (const struct __WS1__getSupportProvince_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getSupportCity_:
		soap_serialize___WS1__getSupportCity_(soap, (const struct __WS1__getSupportCity_ *)ptr);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro:
		soap_serialize___WS1__getWeatherbyCityNamePro(soap, (const struct __WS1__getWeatherbyCityNamePro *)ptr);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityName:
		soap_serialize___WS1__getWeatherbyCityName(soap, (const struct __WS1__getWeatherbyCityName *)ptr);
		break;
	case SOAP_TYPE___WS1__getSupportDataSet:
		soap_serialize___WS1__getSupportDataSet(soap, (const struct __WS1__getSupportDataSet *)ptr);
		break;
	case SOAP_TYPE___WS1__getSupportProvince:
		soap_serialize___WS1__getSupportProvince(soap, (const struct __WS1__getSupportProvince *)ptr);
		break;
	case SOAP_TYPE___WS1__getSupportCity:
		soap_serialize___WS1__getSupportCity(soap, (const struct __WS1__getSupportCity *)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getVersionTime:
		soap_serialize_PointerTo_WS1__getVersionTime(soap, (_WS1__getVersionTime *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getGeoIPContext:
		soap_serialize_PointerTo_WS1__getGeoIPContext(soap, (_WS1__getGeoIPContext *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getCountryCityByIp:
		soap_serialize_PointerTo_WS1__getCountryCityByIp(soap, (_WS1__getCountryCityByIp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getWeatherbyCityNamePro:
		soap_serialize_PointerTo_WS1__getWeatherbyCityNamePro(soap, (_WS1__getWeatherbyCityNamePro *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getWeatherbyCityName:
		soap_serialize_PointerTo_WS1__getWeatherbyCityName(soap, (_WS1__getWeatherbyCityName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getSupportDataSet:
		soap_serialize_PointerTo_WS1__getSupportDataSet(soap, (_WS1__getSupportDataSet *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getSupportProvince:
		soap_serialize_PointerTo_WS1__getSupportProvince(soap, (_WS1__getSupportProvince *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getSupportCity:
		soap_serialize_PointerTo_WS1__getSupportCity(soap, (_WS1__getSupportCity *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult:
		soap_serialize_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, (_WS1__getSupportDataSetResponse_getSupportDataSetResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerToWS1__ArrayOfString:
		soap_serialize_PointerToWS1__ArrayOfString(soap, (WS1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_wstring:
		soap_serialize_wstring(soap, (wchar_t*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS1__ArrayOfString:
		return (void*)soap_instantiate_WS1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getSupportCity:
		return (void*)soap_instantiate__WS1__getSupportCity(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getSupportCityResponse:
		return (void*)soap_instantiate__WS1__getSupportCityResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getSupportProvince:
		return (void*)soap_instantiate__WS1__getSupportProvince(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getSupportProvinceResponse:
		return (void*)soap_instantiate__WS1__getSupportProvinceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getSupportDataSet:
		return (void*)soap_instantiate__WS1__getSupportDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult:
		return (void*)soap_instantiate__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getSupportDataSetResponse:
		return (void*)soap_instantiate__WS1__getSupportDataSetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getWeatherbyCityName:
		return (void*)soap_instantiate__WS1__getWeatherbyCityName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getWeatherbyCityNameResponse:
		return (void*)soap_instantiate__WS1__getWeatherbyCityNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getWeatherbyCityNamePro:
		return (void*)soap_instantiate__WS1__getWeatherbyCityNamePro(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getWeatherbyCityNameProResponse:
		return (void*)soap_instantiate__WS1__getWeatherbyCityNameProResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__DataSet:
		return (void*)soap_instantiate__WS1__DataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getCountryCityByIp:
		return (void*)soap_instantiate__WS1__getCountryCityByIp(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getCountryCityByIpResponse:
		return (void*)soap_instantiate__WS1__getCountryCityByIpResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getGeoIPContext:
		return (void*)soap_instantiate__WS1__getGeoIPContext(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getGeoIPContextResponse:
		return (void*)soap_instantiate__WS1__getGeoIPContextResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getVersionTime:
		return (void*)soap_instantiate__WS1__getVersionTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WS1__getVersionTimeResponse:
		return (void*)soap_instantiate__WS1__getVersionTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getSupportCity:
		return (void*)soap_instantiate___WS1__getSupportCity(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getSupportProvince:
		return (void*)soap_instantiate___WS1__getSupportProvince(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getSupportDataSet:
		return (void*)soap_instantiate___WS1__getSupportDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getWeatherbyCityName:
		return (void*)soap_instantiate___WS1__getWeatherbyCityName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro:
		return (void*)soap_instantiate___WS1__getWeatherbyCityNamePro(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getSupportCity_:
		return (void*)soap_instantiate___WS1__getSupportCity_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getSupportProvince_:
		return (void*)soap_instantiate___WS1__getSupportProvince_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getSupportDataSet_:
		return (void*)soap_instantiate___WS1__getSupportDataSet_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getWeatherbyCityName_:
		return (void*)soap_instantiate___WS1__getWeatherbyCityName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro_:
		return (void*)soap_instantiate___WS1__getWeatherbyCityNamePro_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getCountryCityByIp:
		return (void*)soap_instantiate___WS1__getCountryCityByIp(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getGeoIPContext:
		return (void*)soap_instantiate___WS1__getGeoIPContext(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getVersionTime:
		return (void*)soap_instantiate___WS1__getVersionTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getCountryCityByIp_:
		return (void*)soap_instantiate___WS1__getCountryCityByIp_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getGeoIPContext_:
		return (void*)soap_instantiate___WS1__getGeoIPContext_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___WS1__getVersionTime_:
		return (void*)soap_instantiate___WS1__getVersionTime_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__wstring(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::wstring*>(p->ptr), std::wstring);
		break;
	case SOAP_TYPE_WS1__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<WS1__ArrayOfString*>(p->ptr), WS1__ArrayOfString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<WS1__ArrayOfString*>(p->ptr), WS1__ArrayOfString);
		break;
	case SOAP_TYPE__WS1__getSupportCity:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getSupportCity*>(p->ptr), _WS1__getSupportCity);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getSupportCity*>(p->ptr), _WS1__getSupportCity);
		break;
	case SOAP_TYPE__WS1__getSupportCityResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getSupportCityResponse*>(p->ptr), _WS1__getSupportCityResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getSupportCityResponse*>(p->ptr), _WS1__getSupportCityResponse);
		break;
	case SOAP_TYPE__WS1__getSupportProvince:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getSupportProvince*>(p->ptr), _WS1__getSupportProvince);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getSupportProvince*>(p->ptr), _WS1__getSupportProvince);
		break;
	case SOAP_TYPE__WS1__getSupportProvinceResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getSupportProvinceResponse*>(p->ptr), _WS1__getSupportProvinceResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getSupportProvinceResponse*>(p->ptr), _WS1__getSupportProvinceResponse);
		break;
	case SOAP_TYPE__WS1__getSupportDataSet:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getSupportDataSet*>(p->ptr), _WS1__getSupportDataSet);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getSupportDataSet*>(p->ptr), _WS1__getSupportDataSet);
		break;
	case SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getSupportDataSetResponse_getSupportDataSetResult*>(p->ptr), _WS1__getSupportDataSetResponse_getSupportDataSetResult);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getSupportDataSetResponse_getSupportDataSetResult*>(p->ptr), _WS1__getSupportDataSetResponse_getSupportDataSetResult);
		break;
	case SOAP_TYPE__WS1__getSupportDataSetResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getSupportDataSetResponse*>(p->ptr), _WS1__getSupportDataSetResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getSupportDataSetResponse*>(p->ptr), _WS1__getSupportDataSetResponse);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getWeatherbyCityName*>(p->ptr), _WS1__getWeatherbyCityName);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getWeatherbyCityName*>(p->ptr), _WS1__getWeatherbyCityName);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNameResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getWeatherbyCityNameResponse*>(p->ptr), _WS1__getWeatherbyCityNameResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getWeatherbyCityNameResponse*>(p->ptr), _WS1__getWeatherbyCityNameResponse);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNamePro:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getWeatherbyCityNamePro*>(p->ptr), _WS1__getWeatherbyCityNamePro);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getWeatherbyCityNamePro*>(p->ptr), _WS1__getWeatherbyCityNamePro);
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNameProResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getWeatherbyCityNameProResponse*>(p->ptr), _WS1__getWeatherbyCityNameProResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getWeatherbyCityNameProResponse*>(p->ptr), _WS1__getWeatherbyCityNameProResponse);
		break;
	case SOAP_TYPE__WS1__DataSet:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__DataSet*>(p->ptr), _WS1__DataSet);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__DataSet*>(p->ptr), _WS1__DataSet);
		break;
	case SOAP_TYPE__WS1__getCountryCityByIp:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getCountryCityByIp*>(p->ptr), _WS1__getCountryCityByIp);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getCountryCityByIp*>(p->ptr), _WS1__getCountryCityByIp);
		break;
	case SOAP_TYPE__WS1__getCountryCityByIpResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getCountryCityByIpResponse*>(p->ptr), _WS1__getCountryCityByIpResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getCountryCityByIpResponse*>(p->ptr), _WS1__getCountryCityByIpResponse);
		break;
	case SOAP_TYPE__WS1__getGeoIPContext:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getGeoIPContext*>(p->ptr), _WS1__getGeoIPContext);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getGeoIPContext*>(p->ptr), _WS1__getGeoIPContext);
		break;
	case SOAP_TYPE__WS1__getGeoIPContextResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getGeoIPContextResponse*>(p->ptr), _WS1__getGeoIPContextResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getGeoIPContextResponse*>(p->ptr), _WS1__getGeoIPContextResponse);
		break;
	case SOAP_TYPE__WS1__getVersionTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getVersionTime*>(p->ptr), _WS1__getVersionTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getVersionTime*>(p->ptr), _WS1__getVersionTime);
		break;
	case SOAP_TYPE__WS1__getVersionTimeResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_WS1__getVersionTimeResponse*>(p->ptr), _WS1__getVersionTimeResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_WS1__getVersionTimeResponse*>(p->ptr), _WS1__getVersionTimeResponse);
		break;
	case SOAP_TYPE___WS1__getSupportCity:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getSupportCity*>(p->ptr), struct __WS1__getSupportCity);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getSupportCity*>(p->ptr), struct __WS1__getSupportCity);
		break;
	case SOAP_TYPE___WS1__getSupportProvince:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getSupportProvince*>(p->ptr), struct __WS1__getSupportProvince);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getSupportProvince*>(p->ptr), struct __WS1__getSupportProvince);
		break;
	case SOAP_TYPE___WS1__getSupportDataSet:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getSupportDataSet*>(p->ptr), struct __WS1__getSupportDataSet);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getSupportDataSet*>(p->ptr), struct __WS1__getSupportDataSet);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getWeatherbyCityName*>(p->ptr), struct __WS1__getWeatherbyCityName);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getWeatherbyCityName*>(p->ptr), struct __WS1__getWeatherbyCityName);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getWeatherbyCityNamePro*>(p->ptr), struct __WS1__getWeatherbyCityNamePro);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getWeatherbyCityNamePro*>(p->ptr), struct __WS1__getWeatherbyCityNamePro);
		break;
	case SOAP_TYPE___WS1__getSupportCity_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getSupportCity_*>(p->ptr), struct __WS1__getSupportCity_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getSupportCity_*>(p->ptr), struct __WS1__getSupportCity_);
		break;
	case SOAP_TYPE___WS1__getSupportProvince_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getSupportProvince_*>(p->ptr), struct __WS1__getSupportProvince_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getSupportProvince_*>(p->ptr), struct __WS1__getSupportProvince_);
		break;
	case SOAP_TYPE___WS1__getSupportDataSet_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getSupportDataSet_*>(p->ptr), struct __WS1__getSupportDataSet_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getSupportDataSet_*>(p->ptr), struct __WS1__getSupportDataSet_);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityName_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getWeatherbyCityName_*>(p->ptr), struct __WS1__getWeatherbyCityName_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getWeatherbyCityName_*>(p->ptr), struct __WS1__getWeatherbyCityName_);
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getWeatherbyCityNamePro_*>(p->ptr), struct __WS1__getWeatherbyCityNamePro_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getWeatherbyCityNamePro_*>(p->ptr), struct __WS1__getWeatherbyCityNamePro_);
		break;
	case SOAP_TYPE___WS1__getCountryCityByIp:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getCountryCityByIp*>(p->ptr), struct __WS1__getCountryCityByIp);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getCountryCityByIp*>(p->ptr), struct __WS1__getCountryCityByIp);
		break;
	case SOAP_TYPE___WS1__getGeoIPContext:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getGeoIPContext*>(p->ptr), struct __WS1__getGeoIPContext);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getGeoIPContext*>(p->ptr), struct __WS1__getGeoIPContext);
		break;
	case SOAP_TYPE___WS1__getVersionTime:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getVersionTime*>(p->ptr), struct __WS1__getVersionTime);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getVersionTime*>(p->ptr), struct __WS1__getVersionTime);
		break;
	case SOAP_TYPE___WS1__getCountryCityByIp_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getCountryCityByIp_*>(p->ptr), struct __WS1__getCountryCityByIp_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getCountryCityByIp_*>(p->ptr), struct __WS1__getCountryCityByIp_);
		break;
	case SOAP_TYPE___WS1__getGeoIPContext_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getGeoIPContext_*>(p->ptr), struct __WS1__getGeoIPContext_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getGeoIPContext_*>(p->ptr), struct __WS1__getGeoIPContext_);
		break;
	case SOAP_TYPE___WS1__getVersionTime_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __WS1__getVersionTime_*>(p->ptr), struct __WS1__getVersionTime_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __WS1__getVersionTime_*>(p->ptr), struct __WS1__getVersionTime_);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::wstring> *>(p->ptr), std::vector<std::wstring> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::wstring> *>(p->ptr), std::vector<std::wstring> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__wstring:
		if (t == SOAP_TYPE_std__wstring)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::wstring>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::wstring> *)p)[index] = *(std::wstring *)q;
		}
		break;
	case SOAP_TYPE_std__wstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::wstring type=%d location=%p object=%p\n", t, p, q));
		*(std::wstring*)p = *(std::wstring*)q;
		break;
	case SOAP_TYPE_WS1__ArrayOfString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy WS1__ArrayOfString type=%d location=%p object=%p\n", t, p, q));
		*(WS1__ArrayOfString*)p = *(WS1__ArrayOfString*)q;
		break;
	case SOAP_TYPE__WS1__getSupportCity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getSupportCity type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getSupportCity*)p = *(_WS1__getSupportCity*)q;
		break;
	case SOAP_TYPE__WS1__getSupportCityResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getSupportCityResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getSupportCityResponse*)p = *(_WS1__getSupportCityResponse*)q;
		break;
	case SOAP_TYPE__WS1__getSupportProvince:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getSupportProvince type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getSupportProvince*)p = *(_WS1__getSupportProvince*)q;
		break;
	case SOAP_TYPE__WS1__getSupportProvinceResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getSupportProvinceResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getSupportProvinceResponse*)p = *(_WS1__getSupportProvinceResponse*)q;
		break;
	case SOAP_TYPE__WS1__getSupportDataSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getSupportDataSet type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getSupportDataSet*)p = *(_WS1__getSupportDataSet*)q;
		break;
	case SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getSupportDataSetResponse_getSupportDataSetResult type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getSupportDataSetResponse_getSupportDataSetResult*)p = *(_WS1__getSupportDataSetResponse_getSupportDataSetResult*)q;
		break;
	case SOAP_TYPE__WS1__getSupportDataSetResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getSupportDataSetResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getSupportDataSetResponse*)p = *(_WS1__getSupportDataSetResponse*)q;
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getWeatherbyCityName type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getWeatherbyCityName*)p = *(_WS1__getWeatherbyCityName*)q;
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNameResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getWeatherbyCityNameResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getWeatherbyCityNameResponse*)p = *(_WS1__getWeatherbyCityNameResponse*)q;
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNamePro:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getWeatherbyCityNamePro type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getWeatherbyCityNamePro*)p = *(_WS1__getWeatherbyCityNamePro*)q;
		break;
	case SOAP_TYPE__WS1__getWeatherbyCityNameProResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getWeatherbyCityNameProResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getWeatherbyCityNameProResponse*)p = *(_WS1__getWeatherbyCityNameProResponse*)q;
		break;
	case SOAP_TYPE__WS1__DataSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__DataSet type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__DataSet*)p = *(_WS1__DataSet*)q;
		break;
	case SOAP_TYPE__WS1__getCountryCityByIp:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getCountryCityByIp type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getCountryCityByIp*)p = *(_WS1__getCountryCityByIp*)q;
		break;
	case SOAP_TYPE__WS1__getCountryCityByIpResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getCountryCityByIpResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getCountryCityByIpResponse*)p = *(_WS1__getCountryCityByIpResponse*)q;
		break;
	case SOAP_TYPE__WS1__getGeoIPContext:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getGeoIPContext type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getGeoIPContext*)p = *(_WS1__getGeoIPContext*)q;
		break;
	case SOAP_TYPE__WS1__getGeoIPContextResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getGeoIPContextResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getGeoIPContextResponse*)p = *(_WS1__getGeoIPContextResponse*)q;
		break;
	case SOAP_TYPE__WS1__getVersionTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getVersionTime type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getVersionTime*)p = *(_WS1__getVersionTime*)q;
		break;
	case SOAP_TYPE__WS1__getVersionTimeResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _WS1__getVersionTimeResponse type=%d location=%p object=%p\n", t, p, q));
		*(_WS1__getVersionTimeResponse*)p = *(_WS1__getVersionTimeResponse*)q;
		break;
	case SOAP_TYPE___WS1__getSupportCity:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getSupportCity type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getSupportCity*)p = *(struct __WS1__getSupportCity*)q;
		break;
	case SOAP_TYPE___WS1__getSupportProvince:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getSupportProvince type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getSupportProvince*)p = *(struct __WS1__getSupportProvince*)q;
		break;
	case SOAP_TYPE___WS1__getSupportDataSet:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getSupportDataSet type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getSupportDataSet*)p = *(struct __WS1__getSupportDataSet*)q;
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getWeatherbyCityName type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getWeatherbyCityName*)p = *(struct __WS1__getWeatherbyCityName*)q;
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getWeatherbyCityNamePro type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getWeatherbyCityNamePro*)p = *(struct __WS1__getWeatherbyCityNamePro*)q;
		break;
	case SOAP_TYPE___WS1__getSupportCity_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getSupportCity_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getSupportCity_*)p = *(struct __WS1__getSupportCity_*)q;
		break;
	case SOAP_TYPE___WS1__getSupportProvince_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getSupportProvince_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getSupportProvince_*)p = *(struct __WS1__getSupportProvince_*)q;
		break;
	case SOAP_TYPE___WS1__getSupportDataSet_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getSupportDataSet_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getSupportDataSet_*)p = *(struct __WS1__getSupportDataSet_*)q;
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityName_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getWeatherbyCityName_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getWeatherbyCityName_*)p = *(struct __WS1__getWeatherbyCityName_*)q;
		break;
	case SOAP_TYPE___WS1__getWeatherbyCityNamePro_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getWeatherbyCityNamePro_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getWeatherbyCityNamePro_*)p = *(struct __WS1__getWeatherbyCityNamePro_*)q;
		break;
	case SOAP_TYPE___WS1__getCountryCityByIp:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getCountryCityByIp type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getCountryCityByIp*)p = *(struct __WS1__getCountryCityByIp*)q;
		break;
	case SOAP_TYPE___WS1__getGeoIPContext:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getGeoIPContext type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getGeoIPContext*)p = *(struct __WS1__getGeoIPContext*)q;
		break;
	case SOAP_TYPE___WS1__getVersionTime:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getVersionTime type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getVersionTime*)p = *(struct __WS1__getVersionTime*)q;
		break;
	case SOAP_TYPE___WS1__getCountryCityByIp_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getCountryCityByIp_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getCountryCityByIp_*)p = *(struct __WS1__getCountryCityByIp_*)q;
		break;
	case SOAP_TYPE___WS1__getGeoIPContext_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getGeoIPContext_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getGeoIPContext_*)p = *(struct __WS1__getGeoIPContext_*)q;
		break;
	case SOAP_TYPE___WS1__getVersionTime_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __WS1__getVersionTime_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __WS1__getVersionTime_*)p = *(struct __WS1__getVersionTime_*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_WS1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema = NULL;
	this->_WS1__getSupportDataSetResponse_getSupportDataSetResult::__any = NULL;
}

void _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, int id, const _WS1__getSupportDataSetResponse_getSupportDataSetResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult), type))
		return soap->error;
	if (!a->_WS1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema)
	{	if (soap_element_empty(soap, "xsd:schema"))
			return soap->error;
	}
	else if (soap_outliteral(soap, "xsd:schema", (char*const*)&a->_WS1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_WS1__getSupportDataSetResponse_getSupportDataSetResult::__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC4 soap_in__WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, _WS1__getSupportDataSetResponse_getSupportDataSetResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getSupportDataSetResponse_getSupportDataSetResult*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult, sizeof(_WS1__getSupportDataSetResponse_getSupportDataSetResult), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getSupportDataSetResponse_getSupportDataSetResult *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "xsd:schema", (char**)&a->_WS1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_WS1__getSupportDataSetResponse_getSupportDataSetResult::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_WS1__getSupportDataSetResponse_getSupportDataSetResult::xsd__schema))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_WS1__getSupportDataSetResponse_getSupportDataSetResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult, sizeof(_WS1__getSupportDataSetResponse_getSupportDataSetResult), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC2 soap_instantiate__WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getSupportDataSetResponse_getSupportDataSetResult(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getSupportDataSetResponse_getSupportDataSetResult *p;
	size_t k = sizeof(_WS1__getSupportDataSetResponse_getSupportDataSetResult);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getSupportDataSetResponse_getSupportDataSetResult);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getSupportDataSetResponse_getSupportDataSetResult, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getSupportDataSetResponse_getSupportDataSetResult location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag ? tag : "WS1:getSupportDataSetResponse-getSupportDataSetResult", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC4 soap_get__WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _WS1__getSupportDataSetResponse_getSupportDataSetResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	wchar_t *t;
		s = (std::wstring*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__wstring, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::wstring *p;
	size_t k = sizeof(std::wstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::wstring);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::wstring, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::wstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	if (soap_out_std__wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getVersionTimeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getVersionTimeResponse::getVersionTimeResult = NULL;
}

void _WS1__getVersionTimeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->_WS1__getVersionTimeResponse::getVersionTimeResult);
#endif
}

int _WS1__getVersionTimeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getVersionTimeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getVersionTimeResponse(struct soap *soap, const char *tag, int id, const _WS1__getVersionTimeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getVersionTimeResponse), type))
		return soap->error;
	if (a->getVersionTimeResult)
		soap_element_result(soap, "WS1:getVersionTimeResult");
	if (soap_out_wstring(soap, "WS1:getVersionTimeResult", -1, (wchar_t*const*)&a->_WS1__getVersionTimeResponse::getVersionTimeResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getVersionTimeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getVersionTimeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getVersionTimeResponse * SOAP_FMAC4 soap_in__WS1__getVersionTimeResponse(struct soap *soap, const char *tag, _WS1__getVersionTimeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getVersionTimeResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getVersionTimeResponse, sizeof(_WS1__getVersionTimeResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getVersionTimeResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getVersionTimeResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getVersionTimeResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getVersionTimeResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "WS1:getVersionTimeResult", (wchar_t**)&a->_WS1__getVersionTimeResponse::getVersionTimeResult, "xsd:string"))
				{	soap_flag_getVersionTimeResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getVersionTimeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getVersionTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getVersionTimeResponse, SOAP_TYPE__WS1__getVersionTimeResponse, sizeof(_WS1__getVersionTimeResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getVersionTimeResponse * SOAP_FMAC2 soap_instantiate__WS1__getVersionTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getVersionTimeResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getVersionTimeResponse *p;
	size_t k = sizeof(_WS1__getVersionTimeResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getVersionTimeResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getVersionTimeResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getVersionTimeResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getVersionTimeResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getVersionTimeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getVersionTimeResponse(soap, tag ? tag : "WS1:getVersionTimeResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getVersionTimeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getVersionTimeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getVersionTimeResponse * SOAP_FMAC4 soap_get__WS1__getVersionTimeResponse(struct soap *soap, _WS1__getVersionTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getVersionTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getVersionTime::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _WS1__getVersionTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _WS1__getVersionTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getVersionTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getVersionTime(struct soap *soap, const char *tag, int id, const _WS1__getVersionTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getVersionTime), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getVersionTime::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getVersionTime(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getVersionTime * SOAP_FMAC4 soap_in__WS1__getVersionTime(struct soap *soap, const char *tag, _WS1__getVersionTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getVersionTime*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getVersionTime, sizeof(_WS1__getVersionTime), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getVersionTime)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getVersionTime *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getVersionTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getVersionTime, SOAP_TYPE__WS1__getVersionTime, sizeof(_WS1__getVersionTime), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getVersionTime * SOAP_FMAC2 soap_instantiate__WS1__getVersionTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getVersionTime(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getVersionTime *p;
	size_t k = sizeof(_WS1__getVersionTime);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getVersionTime, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getVersionTime);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getVersionTime, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getVersionTime location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getVersionTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getVersionTime(soap, tag ? tag : "WS1:getVersionTime", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getVersionTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getVersionTime(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getVersionTime * SOAP_FMAC4 soap_get__WS1__getVersionTime(struct soap *soap, _WS1__getVersionTime *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getVersionTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getGeoIPContextResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getGeoIPContextResponse::getGeoIPContextResult = NULL;
}

void _WS1__getGeoIPContextResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToWS1__ArrayOfString(soap, &this->_WS1__getGeoIPContextResponse::getGeoIPContextResult);
#endif
}

int _WS1__getGeoIPContextResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getGeoIPContextResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getGeoIPContextResponse(struct soap *soap, const char *tag, int id, const _WS1__getGeoIPContextResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getGeoIPContextResponse), type))
		return soap->error;
	if (a->getGeoIPContextResult)
		soap_element_result(soap, "WS1:getGeoIPContextResult");
	if (soap_out_PointerToWS1__ArrayOfString(soap, "WS1:getGeoIPContextResult", -1, &a->_WS1__getGeoIPContextResponse::getGeoIPContextResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getGeoIPContextResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getGeoIPContextResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getGeoIPContextResponse * SOAP_FMAC4 soap_in__WS1__getGeoIPContextResponse(struct soap *soap, const char *tag, _WS1__getGeoIPContextResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getGeoIPContextResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getGeoIPContextResponse, sizeof(_WS1__getGeoIPContextResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getGeoIPContextResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getGeoIPContextResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getGeoIPContextResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getGeoIPContextResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToWS1__ArrayOfString(soap, "WS1:getGeoIPContextResult", &a->_WS1__getGeoIPContextResponse::getGeoIPContextResult, "WS1:ArrayOfString"))
				{	soap_flag_getGeoIPContextResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getGeoIPContextResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getGeoIPContextResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getGeoIPContextResponse, SOAP_TYPE__WS1__getGeoIPContextResponse, sizeof(_WS1__getGeoIPContextResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getGeoIPContextResponse * SOAP_FMAC2 soap_instantiate__WS1__getGeoIPContextResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getGeoIPContextResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getGeoIPContextResponse *p;
	size_t k = sizeof(_WS1__getGeoIPContextResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getGeoIPContextResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getGeoIPContextResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getGeoIPContextResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getGeoIPContextResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getGeoIPContextResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getGeoIPContextResponse(soap, tag ? tag : "WS1:getGeoIPContextResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getGeoIPContextResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getGeoIPContextResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getGeoIPContextResponse * SOAP_FMAC4 soap_get__WS1__getGeoIPContextResponse(struct soap *soap, _WS1__getGeoIPContextResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getGeoIPContextResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getGeoIPContext::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _WS1__getGeoIPContext::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _WS1__getGeoIPContext::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getGeoIPContext(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getGeoIPContext(struct soap *soap, const char *tag, int id, const _WS1__getGeoIPContext *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getGeoIPContext), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getGeoIPContext::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getGeoIPContext(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getGeoIPContext * SOAP_FMAC4 soap_in__WS1__getGeoIPContext(struct soap *soap, const char *tag, _WS1__getGeoIPContext *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getGeoIPContext*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getGeoIPContext, sizeof(_WS1__getGeoIPContext), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getGeoIPContext)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getGeoIPContext *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getGeoIPContext *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getGeoIPContext, SOAP_TYPE__WS1__getGeoIPContext, sizeof(_WS1__getGeoIPContext), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getGeoIPContext * SOAP_FMAC2 soap_instantiate__WS1__getGeoIPContext(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getGeoIPContext(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getGeoIPContext *p;
	size_t k = sizeof(_WS1__getGeoIPContext);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getGeoIPContext, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getGeoIPContext);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getGeoIPContext, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getGeoIPContext location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getGeoIPContext::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getGeoIPContext(soap, tag ? tag : "WS1:getGeoIPContext", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getGeoIPContext::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getGeoIPContext(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getGeoIPContext * SOAP_FMAC4 soap_get__WS1__getGeoIPContext(struct soap *soap, _WS1__getGeoIPContext *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getGeoIPContext(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getCountryCityByIpResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getCountryCityByIpResponse::getCountryCityByIpResult = NULL;
}

void _WS1__getCountryCityByIpResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToWS1__ArrayOfString(soap, &this->_WS1__getCountryCityByIpResponse::getCountryCityByIpResult);
#endif
}

int _WS1__getCountryCityByIpResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getCountryCityByIpResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getCountryCityByIpResponse(struct soap *soap, const char *tag, int id, const _WS1__getCountryCityByIpResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getCountryCityByIpResponse), type))
		return soap->error;
	if (a->getCountryCityByIpResult)
		soap_element_result(soap, "WS1:getCountryCityByIpResult");
	if (soap_out_PointerToWS1__ArrayOfString(soap, "WS1:getCountryCityByIpResult", -1, &a->_WS1__getCountryCityByIpResponse::getCountryCityByIpResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getCountryCityByIpResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getCountryCityByIpResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getCountryCityByIpResponse * SOAP_FMAC4 soap_in__WS1__getCountryCityByIpResponse(struct soap *soap, const char *tag, _WS1__getCountryCityByIpResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getCountryCityByIpResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getCountryCityByIpResponse, sizeof(_WS1__getCountryCityByIpResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getCountryCityByIpResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getCountryCityByIpResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getCountryCityByIpResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getCountryCityByIpResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToWS1__ArrayOfString(soap, "WS1:getCountryCityByIpResult", &a->_WS1__getCountryCityByIpResponse::getCountryCityByIpResult, "WS1:ArrayOfString"))
				{	soap_flag_getCountryCityByIpResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getCountryCityByIpResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getCountryCityByIpResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getCountryCityByIpResponse, SOAP_TYPE__WS1__getCountryCityByIpResponse, sizeof(_WS1__getCountryCityByIpResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getCountryCityByIpResponse * SOAP_FMAC2 soap_instantiate__WS1__getCountryCityByIpResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getCountryCityByIpResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getCountryCityByIpResponse *p;
	size_t k = sizeof(_WS1__getCountryCityByIpResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getCountryCityByIpResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getCountryCityByIpResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getCountryCityByIpResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getCountryCityByIpResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getCountryCityByIpResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getCountryCityByIpResponse(soap, tag ? tag : "WS1:getCountryCityByIpResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getCountryCityByIpResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getCountryCityByIpResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getCountryCityByIpResponse * SOAP_FMAC4 soap_get__WS1__getCountryCityByIpResponse(struct soap *soap, _WS1__getCountryCityByIpResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getCountryCityByIpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getCountryCityByIp::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getCountryCityByIp::theIpAddress = NULL;
}

void _WS1__getCountryCityByIp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->_WS1__getCountryCityByIp::theIpAddress);
#endif
}

int _WS1__getCountryCityByIp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getCountryCityByIp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getCountryCityByIp(struct soap *soap, const char *tag, int id, const _WS1__getCountryCityByIp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getCountryCityByIp), type))
		return soap->error;
	if (soap_out_wstring(soap, "WS1:theIpAddress", -1, (wchar_t*const*)&a->_WS1__getCountryCityByIp::theIpAddress, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getCountryCityByIp::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getCountryCityByIp(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getCountryCityByIp * SOAP_FMAC4 soap_in__WS1__getCountryCityByIp(struct soap *soap, const char *tag, _WS1__getCountryCityByIp *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getCountryCityByIp*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getCountryCityByIp, sizeof(_WS1__getCountryCityByIp), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getCountryCityByIp)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getCountryCityByIp *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_theIpAddress1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theIpAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "WS1:theIpAddress", (wchar_t**)&a->_WS1__getCountryCityByIp::theIpAddress, "xsd:string"))
				{	soap_flag_theIpAddress1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getCountryCityByIp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getCountryCityByIp, SOAP_TYPE__WS1__getCountryCityByIp, sizeof(_WS1__getCountryCityByIp), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getCountryCityByIp * SOAP_FMAC2 soap_instantiate__WS1__getCountryCityByIp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getCountryCityByIp(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getCountryCityByIp *p;
	size_t k = sizeof(_WS1__getCountryCityByIp);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getCountryCityByIp, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getCountryCityByIp);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getCountryCityByIp, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getCountryCityByIp location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getCountryCityByIp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getCountryCityByIp(soap, tag ? tag : "WS1:getCountryCityByIp", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getCountryCityByIp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getCountryCityByIp(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getCountryCityByIp * SOAP_FMAC4 soap_get__WS1__getCountryCityByIp(struct soap *soap, _WS1__getCountryCityByIp *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getCountryCityByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__DataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__DataSet::xsd__schema = NULL;
	this->_WS1__DataSet::__any = NULL;
}

void _WS1__DataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _WS1__DataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__DataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__DataSet(struct soap *soap, const char *tag, int id, const _WS1__DataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__DataSet), type))
		return soap->error;
	if (!a->_WS1__DataSet::xsd__schema)
	{	if (soap_element_empty(soap, "xsd:schema"))
			return soap->error;
	}
	else if (soap_outliteral(soap, "xsd:schema", (char*const*)&a->_WS1__DataSet::xsd__schema, NULL))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->_WS1__DataSet::__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__DataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__DataSet(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__DataSet * SOAP_FMAC4 soap_in__WS1__DataSet(struct soap *soap, const char *tag, _WS1__DataSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__DataSet*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__DataSet, sizeof(_WS1__DataSet), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__DataSet)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__DataSet *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "xsd:schema", (char**)&a->_WS1__DataSet::xsd__schema))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->_WS1__DataSet::__any))
				{	soap_flag___any1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_WS1__DataSet::xsd__schema))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_WS1__DataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__DataSet, SOAP_TYPE__WS1__DataSet, sizeof(_WS1__DataSet), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__DataSet * SOAP_FMAC2 soap_instantiate__WS1__DataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__DataSet(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__DataSet *p;
	size_t k = sizeof(_WS1__DataSet);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__DataSet, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__DataSet);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__DataSet, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__DataSet location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__DataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__DataSet(soap, tag ? tag : "WS1:DataSet", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__DataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__DataSet(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__DataSet * SOAP_FMAC4 soap_get__WS1__DataSet(struct soap *soap, _WS1__DataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getWeatherbyCityNameProResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult = NULL;
}

void _WS1__getWeatherbyCityNameProResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToWS1__ArrayOfString(soap, &this->_WS1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult);
#endif
}

int _WS1__getWeatherbyCityNameProResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getWeatherbyCityNameProResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getWeatherbyCityNameProResponse(struct soap *soap, const char *tag, int id, const _WS1__getWeatherbyCityNameProResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getWeatherbyCityNameProResponse), type))
		return soap->error;
	if (a->getWeatherbyCityNameProResult)
		soap_element_result(soap, "WS1:getWeatherbyCityNameProResult");
	if (soap_out_PointerToWS1__ArrayOfString(soap, "WS1:getWeatherbyCityNameProResult", -1, &a->_WS1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getWeatherbyCityNameProResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getWeatherbyCityNameProResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNameProResponse * SOAP_FMAC4 soap_in__WS1__getWeatherbyCityNameProResponse(struct soap *soap, const char *tag, _WS1__getWeatherbyCityNameProResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getWeatherbyCityNameProResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getWeatherbyCityNameProResponse, sizeof(_WS1__getWeatherbyCityNameProResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getWeatherbyCityNameProResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getWeatherbyCityNameProResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getWeatherbyCityNameProResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getWeatherbyCityNameProResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToWS1__ArrayOfString(soap, "WS1:getWeatherbyCityNameProResult", &a->_WS1__getWeatherbyCityNameProResponse::getWeatherbyCityNameProResult, "WS1:ArrayOfString"))
				{	soap_flag_getWeatherbyCityNameProResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getWeatherbyCityNameProResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getWeatherbyCityNameProResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getWeatherbyCityNameProResponse, SOAP_TYPE__WS1__getWeatherbyCityNameProResponse, sizeof(_WS1__getWeatherbyCityNameProResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getWeatherbyCityNameProResponse * SOAP_FMAC2 soap_instantiate__WS1__getWeatherbyCityNameProResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getWeatherbyCityNameProResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getWeatherbyCityNameProResponse *p;
	size_t k = sizeof(_WS1__getWeatherbyCityNameProResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getWeatherbyCityNameProResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getWeatherbyCityNameProResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getWeatherbyCityNameProResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getWeatherbyCityNameProResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getWeatherbyCityNameProResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getWeatherbyCityNameProResponse(soap, tag ? tag : "WS1:getWeatherbyCityNameProResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getWeatherbyCityNameProResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getWeatherbyCityNameProResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNameProResponse * SOAP_FMAC4 soap_get__WS1__getWeatherbyCityNameProResponse(struct soap *soap, _WS1__getWeatherbyCityNameProResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getWeatherbyCityNameProResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getWeatherbyCityNamePro::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getWeatherbyCityNamePro::theCityName = NULL;
	this->_WS1__getWeatherbyCityNamePro::theUserID = NULL;
}

void _WS1__getWeatherbyCityNamePro::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->_WS1__getWeatherbyCityNamePro::theCityName);
	soap_serialize_wstring(soap, (wchar_t*const*)&this->_WS1__getWeatherbyCityNamePro::theUserID);
#endif
}

int _WS1__getWeatherbyCityNamePro::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getWeatherbyCityNamePro(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, int id, const _WS1__getWeatherbyCityNamePro *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getWeatherbyCityNamePro), type))
		return soap->error;
	if (soap_out_wstring(soap, "WS1:theCityName", -1, (wchar_t*const*)&a->_WS1__getWeatherbyCityNamePro::theCityName, ""))
		return soap->error;
	if (soap_out_wstring(soap, "WS1:theUserID", -1, (wchar_t*const*)&a->_WS1__getWeatherbyCityNamePro::theUserID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getWeatherbyCityNamePro::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getWeatherbyCityNamePro(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_in__WS1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, _WS1__getWeatherbyCityNamePro *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getWeatherbyCityNamePro*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getWeatherbyCityNamePro, sizeof(_WS1__getWeatherbyCityNamePro), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getWeatherbyCityNamePro)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getWeatherbyCityNamePro *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_theCityName1 = 1;
	size_t soap_flag_theUserID1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theCityName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "WS1:theCityName", (wchar_t**)&a->_WS1__getWeatherbyCityNamePro::theCityName, "xsd:string"))
				{	soap_flag_theCityName1--;
					continue;
				}
			}
			if (soap_flag_theUserID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "WS1:theUserID", (wchar_t**)&a->_WS1__getWeatherbyCityNamePro::theUserID, "xsd:string"))
				{	soap_flag_theUserID1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getWeatherbyCityNamePro *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getWeatherbyCityNamePro, SOAP_TYPE__WS1__getWeatherbyCityNamePro, sizeof(_WS1__getWeatherbyCityNamePro), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate__WS1__getWeatherbyCityNamePro(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getWeatherbyCityNamePro(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getWeatherbyCityNamePro *p;
	size_t k = sizeof(_WS1__getWeatherbyCityNamePro);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getWeatherbyCityNamePro, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getWeatherbyCityNamePro);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getWeatherbyCityNamePro, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getWeatherbyCityNamePro location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getWeatherbyCityNamePro::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getWeatherbyCityNamePro(soap, tag ? tag : "WS1:getWeatherbyCityNamePro", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getWeatherbyCityNamePro::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getWeatherbyCityNamePro(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_get__WS1__getWeatherbyCityNamePro(struct soap *soap, _WS1__getWeatherbyCityNamePro *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getWeatherbyCityNamePro(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getWeatherbyCityNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult = NULL;
}

void _WS1__getWeatherbyCityNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToWS1__ArrayOfString(soap, &this->_WS1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult);
#endif
}

int _WS1__getWeatherbyCityNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getWeatherbyCityNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getWeatherbyCityNameResponse(struct soap *soap, const char *tag, int id, const _WS1__getWeatherbyCityNameResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getWeatherbyCityNameResponse), type))
		return soap->error;
	if (a->getWeatherbyCityNameResult)
		soap_element_result(soap, "WS1:getWeatherbyCityNameResult");
	if (soap_out_PointerToWS1__ArrayOfString(soap, "WS1:getWeatherbyCityNameResult", -1, &a->_WS1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getWeatherbyCityNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getWeatherbyCityNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNameResponse * SOAP_FMAC4 soap_in__WS1__getWeatherbyCityNameResponse(struct soap *soap, const char *tag, _WS1__getWeatherbyCityNameResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getWeatherbyCityNameResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getWeatherbyCityNameResponse, sizeof(_WS1__getWeatherbyCityNameResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getWeatherbyCityNameResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getWeatherbyCityNameResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getWeatherbyCityNameResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getWeatherbyCityNameResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToWS1__ArrayOfString(soap, "WS1:getWeatherbyCityNameResult", &a->_WS1__getWeatherbyCityNameResponse::getWeatherbyCityNameResult, "WS1:ArrayOfString"))
				{	soap_flag_getWeatherbyCityNameResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getWeatherbyCityNameResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getWeatherbyCityNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getWeatherbyCityNameResponse, SOAP_TYPE__WS1__getWeatherbyCityNameResponse, sizeof(_WS1__getWeatherbyCityNameResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getWeatherbyCityNameResponse * SOAP_FMAC2 soap_instantiate__WS1__getWeatherbyCityNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getWeatherbyCityNameResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getWeatherbyCityNameResponse *p;
	size_t k = sizeof(_WS1__getWeatherbyCityNameResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getWeatherbyCityNameResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getWeatherbyCityNameResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getWeatherbyCityNameResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getWeatherbyCityNameResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getWeatherbyCityNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getWeatherbyCityNameResponse(soap, tag ? tag : "WS1:getWeatherbyCityNameResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getWeatherbyCityNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getWeatherbyCityNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNameResponse * SOAP_FMAC4 soap_get__WS1__getWeatherbyCityNameResponse(struct soap *soap, _WS1__getWeatherbyCityNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getWeatherbyCityNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getWeatherbyCityName::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getWeatherbyCityName::theCityName = NULL;
}

void _WS1__getWeatherbyCityName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->_WS1__getWeatherbyCityName::theCityName);
#endif
}

int _WS1__getWeatherbyCityName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getWeatherbyCityName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getWeatherbyCityName(struct soap *soap, const char *tag, int id, const _WS1__getWeatherbyCityName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getWeatherbyCityName), type))
		return soap->error;
	if (soap_out_wstring(soap, "WS1:theCityName", -1, (wchar_t*const*)&a->_WS1__getWeatherbyCityName::theCityName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getWeatherbyCityName::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getWeatherbyCityName(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityName * SOAP_FMAC4 soap_in__WS1__getWeatherbyCityName(struct soap *soap, const char *tag, _WS1__getWeatherbyCityName *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getWeatherbyCityName*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getWeatherbyCityName, sizeof(_WS1__getWeatherbyCityName), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getWeatherbyCityName)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getWeatherbyCityName *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_theCityName1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_theCityName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "WS1:theCityName", (wchar_t**)&a->_WS1__getWeatherbyCityName::theCityName, "xsd:string"))
				{	soap_flag_theCityName1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getWeatherbyCityName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getWeatherbyCityName, SOAP_TYPE__WS1__getWeatherbyCityName, sizeof(_WS1__getWeatherbyCityName), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate__WS1__getWeatherbyCityName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getWeatherbyCityName(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getWeatherbyCityName *p;
	size_t k = sizeof(_WS1__getWeatherbyCityName);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getWeatherbyCityName, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getWeatherbyCityName);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getWeatherbyCityName, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getWeatherbyCityName location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getWeatherbyCityName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getWeatherbyCityName(soap, tag ? tag : "WS1:getWeatherbyCityName", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getWeatherbyCityName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getWeatherbyCityName(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getWeatherbyCityName * SOAP_FMAC4 soap_get__WS1__getWeatherbyCityName(struct soap *soap, _WS1__getWeatherbyCityName *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getWeatherbyCityName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getSupportDataSetResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getSupportDataSetResponse::getSupportDataSetResult = NULL;
}

void _WS1__getSupportDataSetResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, &this->_WS1__getSupportDataSetResponse::getSupportDataSetResult);
#endif
}

int _WS1__getSupportDataSetResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getSupportDataSetResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getSupportDataSetResponse(struct soap *soap, const char *tag, int id, const _WS1__getSupportDataSetResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getSupportDataSetResponse), type))
		return soap->error;
	if (a->getSupportDataSetResult)
		soap_element_result(soap, "WS1:getSupportDataSetResult");
	if (soap_out_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, "WS1:getSupportDataSetResult", -1, &a->_WS1__getSupportDataSetResponse::getSupportDataSetResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getSupportDataSetResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getSupportDataSetResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getSupportDataSetResponse * SOAP_FMAC4 soap_in__WS1__getSupportDataSetResponse(struct soap *soap, const char *tag, _WS1__getSupportDataSetResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getSupportDataSetResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getSupportDataSetResponse, sizeof(_WS1__getSupportDataSetResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getSupportDataSetResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getSupportDataSetResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getSupportDataSetResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportDataSetResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, "WS1:getSupportDataSetResult", &a->_WS1__getSupportDataSetResponse::getSupportDataSetResult, ""))
				{	soap_flag_getSupportDataSetResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getSupportDataSetResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getSupportDataSetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getSupportDataSetResponse, SOAP_TYPE__WS1__getSupportDataSetResponse, sizeof(_WS1__getSupportDataSetResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getSupportDataSetResponse * SOAP_FMAC2 soap_instantiate__WS1__getSupportDataSetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getSupportDataSetResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getSupportDataSetResponse *p;
	size_t k = sizeof(_WS1__getSupportDataSetResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getSupportDataSetResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getSupportDataSetResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getSupportDataSetResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getSupportDataSetResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getSupportDataSetResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getSupportDataSetResponse(soap, tag ? tag : "WS1:getSupportDataSetResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getSupportDataSetResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getSupportDataSetResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getSupportDataSetResponse * SOAP_FMAC4 soap_get__WS1__getSupportDataSetResponse(struct soap *soap, _WS1__getSupportDataSetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getSupportDataSetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getSupportDataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _WS1__getSupportDataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _WS1__getSupportDataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getSupportDataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getSupportDataSet(struct soap *soap, const char *tag, int id, const _WS1__getSupportDataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getSupportDataSet), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getSupportDataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getSupportDataSet(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getSupportDataSet * SOAP_FMAC4 soap_in__WS1__getSupportDataSet(struct soap *soap, const char *tag, _WS1__getSupportDataSet *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getSupportDataSet*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getSupportDataSet, sizeof(_WS1__getSupportDataSet), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getSupportDataSet)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getSupportDataSet *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getSupportDataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getSupportDataSet, SOAP_TYPE__WS1__getSupportDataSet, sizeof(_WS1__getSupportDataSet), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getSupportDataSet * SOAP_FMAC2 soap_instantiate__WS1__getSupportDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getSupportDataSet(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getSupportDataSet *p;
	size_t k = sizeof(_WS1__getSupportDataSet);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getSupportDataSet, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getSupportDataSet);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getSupportDataSet, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getSupportDataSet location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getSupportDataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getSupportDataSet(soap, tag ? tag : "WS1:getSupportDataSet", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getSupportDataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getSupportDataSet(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getSupportDataSet * SOAP_FMAC4 soap_get__WS1__getSupportDataSet(struct soap *soap, _WS1__getSupportDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getSupportDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getSupportProvinceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getSupportProvinceResponse::getSupportProvinceResult = NULL;
}

void _WS1__getSupportProvinceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToWS1__ArrayOfString(soap, &this->_WS1__getSupportProvinceResponse::getSupportProvinceResult);
#endif
}

int _WS1__getSupportProvinceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getSupportProvinceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getSupportProvinceResponse(struct soap *soap, const char *tag, int id, const _WS1__getSupportProvinceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getSupportProvinceResponse), type))
		return soap->error;
	if (a->getSupportProvinceResult)
		soap_element_result(soap, "WS1:getSupportProvinceResult");
	if (soap_out_PointerToWS1__ArrayOfString(soap, "WS1:getSupportProvinceResult", -1, &a->_WS1__getSupportProvinceResponse::getSupportProvinceResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getSupportProvinceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getSupportProvinceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getSupportProvinceResponse * SOAP_FMAC4 soap_in__WS1__getSupportProvinceResponse(struct soap *soap, const char *tag, _WS1__getSupportProvinceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getSupportProvinceResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getSupportProvinceResponse, sizeof(_WS1__getSupportProvinceResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getSupportProvinceResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getSupportProvinceResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getSupportProvinceResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportProvinceResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToWS1__ArrayOfString(soap, "WS1:getSupportProvinceResult", &a->_WS1__getSupportProvinceResponse::getSupportProvinceResult, "WS1:ArrayOfString"))
				{	soap_flag_getSupportProvinceResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getSupportProvinceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getSupportProvinceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getSupportProvinceResponse, SOAP_TYPE__WS1__getSupportProvinceResponse, sizeof(_WS1__getSupportProvinceResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getSupportProvinceResponse * SOAP_FMAC2 soap_instantiate__WS1__getSupportProvinceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getSupportProvinceResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getSupportProvinceResponse *p;
	size_t k = sizeof(_WS1__getSupportProvinceResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getSupportProvinceResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getSupportProvinceResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getSupportProvinceResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getSupportProvinceResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getSupportProvinceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getSupportProvinceResponse(soap, tag ? tag : "WS1:getSupportProvinceResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getSupportProvinceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getSupportProvinceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getSupportProvinceResponse * SOAP_FMAC4 soap_get__WS1__getSupportProvinceResponse(struct soap *soap, _WS1__getSupportProvinceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getSupportProvinceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getSupportProvince::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _WS1__getSupportProvince::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _WS1__getSupportProvince::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getSupportProvince(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getSupportProvince(struct soap *soap, const char *tag, int id, const _WS1__getSupportProvince *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getSupportProvince), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getSupportProvince::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getSupportProvince(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getSupportProvince * SOAP_FMAC4 soap_in__WS1__getSupportProvince(struct soap *soap, const char *tag, _WS1__getSupportProvince *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getSupportProvince*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getSupportProvince, sizeof(_WS1__getSupportProvince), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getSupportProvince)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getSupportProvince *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getSupportProvince *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getSupportProvince, SOAP_TYPE__WS1__getSupportProvince, sizeof(_WS1__getSupportProvince), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getSupportProvince * SOAP_FMAC2 soap_instantiate__WS1__getSupportProvince(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getSupportProvince(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getSupportProvince *p;
	size_t k = sizeof(_WS1__getSupportProvince);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getSupportProvince, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getSupportProvince);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getSupportProvince, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getSupportProvince location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getSupportProvince::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getSupportProvince(soap, tag ? tag : "WS1:getSupportProvince", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getSupportProvince::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getSupportProvince(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getSupportProvince * SOAP_FMAC4 soap_get__WS1__getSupportProvince(struct soap *soap, _WS1__getSupportProvince *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getSupportProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getSupportCityResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getSupportCityResponse::getSupportCityResult = NULL;
}

void _WS1__getSupportCityResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToWS1__ArrayOfString(soap, &this->_WS1__getSupportCityResponse::getSupportCityResult);
#endif
}

int _WS1__getSupportCityResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getSupportCityResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getSupportCityResponse(struct soap *soap, const char *tag, int id, const _WS1__getSupportCityResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getSupportCityResponse), type))
		return soap->error;
	if (a->getSupportCityResult)
		soap_element_result(soap, "WS1:getSupportCityResult");
	if (soap_out_PointerToWS1__ArrayOfString(soap, "WS1:getSupportCityResult", -1, &a->_WS1__getSupportCityResponse::getSupportCityResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getSupportCityResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getSupportCityResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getSupportCityResponse * SOAP_FMAC4 soap_in__WS1__getSupportCityResponse(struct soap *soap, const char *tag, _WS1__getSupportCityResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getSupportCityResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getSupportCityResponse, sizeof(_WS1__getSupportCityResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getSupportCityResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getSupportCityResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getSupportCityResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getSupportCityResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToWS1__ArrayOfString(soap, "WS1:getSupportCityResult", &a->_WS1__getSupportCityResponse::getSupportCityResult, "WS1:ArrayOfString"))
				{	soap_flag_getSupportCityResult1--;
					continue;
				}
			}
			soap_check_result(soap, "WS1:getSupportCityResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getSupportCityResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getSupportCityResponse, SOAP_TYPE__WS1__getSupportCityResponse, sizeof(_WS1__getSupportCityResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getSupportCityResponse * SOAP_FMAC2 soap_instantiate__WS1__getSupportCityResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getSupportCityResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getSupportCityResponse *p;
	size_t k = sizeof(_WS1__getSupportCityResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getSupportCityResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getSupportCityResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getSupportCityResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getSupportCityResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getSupportCityResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getSupportCityResponse(soap, tag ? tag : "WS1:getSupportCityResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getSupportCityResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getSupportCityResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getSupportCityResponse * SOAP_FMAC4 soap_get__WS1__getSupportCityResponse(struct soap *soap, _WS1__getSupportCityResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getSupportCityResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _WS1__getSupportCity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WS1__getSupportCity::byProvinceName = NULL;
}

void _WS1__getSupportCity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_wstring(soap, (wchar_t*const*)&this->_WS1__getSupportCity::byProvinceName);
#endif
}

int _WS1__getSupportCity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WS1__getSupportCity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WS1__getSupportCity(struct soap *soap, const char *tag, int id, const _WS1__getSupportCity *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WS1__getSupportCity), type))
		return soap->error;
	if (soap_out_wstring(soap, "WS1:byProvinceName", -1, (wchar_t*const*)&a->_WS1__getSupportCity::byProvinceName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_WS1__getSupportCity::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__WS1__getSupportCity(soap, tag, this, type);
}

SOAP_FMAC3 _WS1__getSupportCity * SOAP_FMAC4 soap_in__WS1__getSupportCity(struct soap *soap, const char *tag, _WS1__getSupportCity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WS1__getSupportCity*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__WS1__getSupportCity, sizeof(_WS1__getSupportCity), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__WS1__getSupportCity)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_WS1__getSupportCity *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_byProvinceName1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_byProvinceName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_wstring(soap, "WS1:byProvinceName", (wchar_t**)&a->_WS1__getSupportCity::byProvinceName, "xsd:string"))
				{	soap_flag_byProvinceName1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WS1__getSupportCity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WS1__getSupportCity, SOAP_TYPE__WS1__getSupportCity, sizeof(_WS1__getSupportCity), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _WS1__getSupportCity * SOAP_FMAC2 soap_instantiate__WS1__getSupportCity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WS1__getSupportCity(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_WS1__getSupportCity *p;
	size_t k = sizeof(_WS1__getSupportCity);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__WS1__getSupportCity, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _WS1__getSupportCity);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _WS1__getSupportCity, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _WS1__getSupportCity location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _WS1__getSupportCity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__WS1__getSupportCity(soap, tag ? tag : "WS1:getSupportCity", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WS1__getSupportCity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WS1__getSupportCity(soap, this, tag, type);
}

SOAP_FMAC3 _WS1__getSupportCity * SOAP_FMAC4 soap_get__WS1__getSupportCity(struct soap *soap, _WS1__getSupportCity *p, const char *tag, const char *type)
{
	if ((p = soap_in__WS1__getSupportCity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void WS1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__wstring(soap, &this->WS1__ArrayOfString::string);
}

void WS1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__wstring(soap, &this->WS1__ArrayOfString::string);
#endif
}

int WS1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_WS1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_WS1__ArrayOfString(struct soap *soap, const char *tag, int id, const WS1__ArrayOfString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS1__ArrayOfString), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__wstring(soap, "WS1:string", -1, &a->WS1__ArrayOfString::string, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *WS1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_WS1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 WS1__ArrayOfString * SOAP_FMAC4 soap_in_WS1__ArrayOfString(struct soap *soap, const char *tag, WS1__ArrayOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (WS1__ArrayOfString*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS1__ArrayOfString, sizeof(WS1__ArrayOfString), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_WS1__ArrayOfString)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (WS1__ArrayOfString *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__wstring(soap, "WS1:string", &a->WS1__ArrayOfString::string, "xsd:string"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (WS1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS1__ArrayOfString, SOAP_TYPE_WS1__ArrayOfString, sizeof(WS1__ArrayOfString), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 WS1__ArrayOfString * SOAP_FMAC2 soap_instantiate_WS1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_WS1__ArrayOfString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	WS1__ArrayOfString *p;
	size_t k = sizeof(WS1__ArrayOfString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_WS1__ArrayOfString, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, WS1__ArrayOfString);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, WS1__ArrayOfString, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated WS1__ArrayOfString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int WS1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_WS1__ArrayOfString(soap, tag ? tag : "WS1:ArrayOfString", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *WS1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_WS1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 WS1__ArrayOfString * SOAP_FMAC4 soap_get_WS1__ArrayOfString(struct soap *soap, WS1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_WS1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getVersionTime_(struct soap *soap, struct __WS1__getVersionTime_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getVersionTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getVersionTime_(struct soap *soap, const struct __WS1__getVersionTime_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getVersionTime(soap, &a->WS1__getVersionTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getVersionTime_(struct soap *soap, const char *tag, int id, const struct __WS1__getVersionTime_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getVersionTime(soap, "WS1:getVersionTime", -1, &a->WS1__getVersionTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getVersionTime_ * SOAP_FMAC4 soap_in___WS1__getVersionTime_(struct soap *soap, const char *tag, struct __WS1__getVersionTime_ *a, const char *type)
{
	size_t soap_flag_WS1__getVersionTime = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getVersionTime_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getVersionTime_, sizeof(struct __WS1__getVersionTime_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getVersionTime_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getVersionTime && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getVersionTime(soap, "WS1:getVersionTime", &a->WS1__getVersionTime, ""))
				{	soap_flag_WS1__getVersionTime--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getVersionTime_ * SOAP_FMAC2 soap_instantiate___WS1__getVersionTime_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getVersionTime_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getVersionTime_ *p;
	size_t k = sizeof(struct __WS1__getVersionTime_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getVersionTime_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getVersionTime_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getVersionTime_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getVersionTime_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getVersionTime_(struct soap *soap, const struct __WS1__getVersionTime_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getVersionTime_(soap, tag ? tag : "-WS1:getVersionTime", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getVersionTime_ * SOAP_FMAC4 soap_get___WS1__getVersionTime_(struct soap *soap, struct __WS1__getVersionTime_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getVersionTime_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getGeoIPContext_(struct soap *soap, struct __WS1__getGeoIPContext_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getGeoIPContext = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getGeoIPContext_(struct soap *soap, const struct __WS1__getGeoIPContext_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getGeoIPContext(soap, &a->WS1__getGeoIPContext);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getGeoIPContext_(struct soap *soap, const char *tag, int id, const struct __WS1__getGeoIPContext_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getGeoIPContext(soap, "WS1:getGeoIPContext", -1, &a->WS1__getGeoIPContext, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getGeoIPContext_ * SOAP_FMAC4 soap_in___WS1__getGeoIPContext_(struct soap *soap, const char *tag, struct __WS1__getGeoIPContext_ *a, const char *type)
{
	size_t soap_flag_WS1__getGeoIPContext = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getGeoIPContext_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getGeoIPContext_, sizeof(struct __WS1__getGeoIPContext_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getGeoIPContext_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getGeoIPContext && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getGeoIPContext(soap, "WS1:getGeoIPContext", &a->WS1__getGeoIPContext, ""))
				{	soap_flag_WS1__getGeoIPContext--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getGeoIPContext_ * SOAP_FMAC2 soap_instantiate___WS1__getGeoIPContext_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getGeoIPContext_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getGeoIPContext_ *p;
	size_t k = sizeof(struct __WS1__getGeoIPContext_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getGeoIPContext_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getGeoIPContext_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getGeoIPContext_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getGeoIPContext_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getGeoIPContext_(struct soap *soap, const struct __WS1__getGeoIPContext_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getGeoIPContext_(soap, tag ? tag : "-WS1:getGeoIPContext", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getGeoIPContext_ * SOAP_FMAC4 soap_get___WS1__getGeoIPContext_(struct soap *soap, struct __WS1__getGeoIPContext_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getGeoIPContext_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getCountryCityByIp_(struct soap *soap, struct __WS1__getCountryCityByIp_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getCountryCityByIp = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getCountryCityByIp_(struct soap *soap, const struct __WS1__getCountryCityByIp_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getCountryCityByIp(soap, &a->WS1__getCountryCityByIp);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getCountryCityByIp_(struct soap *soap, const char *tag, int id, const struct __WS1__getCountryCityByIp_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getCountryCityByIp(soap, "WS1:getCountryCityByIp", -1, &a->WS1__getCountryCityByIp, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getCountryCityByIp_ * SOAP_FMAC4 soap_in___WS1__getCountryCityByIp_(struct soap *soap, const char *tag, struct __WS1__getCountryCityByIp_ *a, const char *type)
{
	size_t soap_flag_WS1__getCountryCityByIp = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getCountryCityByIp_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getCountryCityByIp_, sizeof(struct __WS1__getCountryCityByIp_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getCountryCityByIp_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getCountryCityByIp && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getCountryCityByIp(soap, "WS1:getCountryCityByIp", &a->WS1__getCountryCityByIp, ""))
				{	soap_flag_WS1__getCountryCityByIp--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getCountryCityByIp_ * SOAP_FMAC2 soap_instantiate___WS1__getCountryCityByIp_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getCountryCityByIp_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getCountryCityByIp_ *p;
	size_t k = sizeof(struct __WS1__getCountryCityByIp_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getCountryCityByIp_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getCountryCityByIp_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getCountryCityByIp_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getCountryCityByIp_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getCountryCityByIp_(struct soap *soap, const struct __WS1__getCountryCityByIp_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getCountryCityByIp_(soap, tag ? tag : "-WS1:getCountryCityByIp", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getCountryCityByIp_ * SOAP_FMAC4 soap_get___WS1__getCountryCityByIp_(struct soap *soap, struct __WS1__getCountryCityByIp_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getCountryCityByIp_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getVersionTime(struct soap *soap, struct __WS1__getVersionTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getVersionTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getVersionTime(struct soap *soap, const struct __WS1__getVersionTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getVersionTime(soap, &a->WS1__getVersionTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getVersionTime(struct soap *soap, const char *tag, int id, const struct __WS1__getVersionTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getVersionTime(soap, "WS1:getVersionTime", -1, &a->WS1__getVersionTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getVersionTime * SOAP_FMAC4 soap_in___WS1__getVersionTime(struct soap *soap, const char *tag, struct __WS1__getVersionTime *a, const char *type)
{
	size_t soap_flag_WS1__getVersionTime = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getVersionTime*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getVersionTime, sizeof(struct __WS1__getVersionTime), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getVersionTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getVersionTime && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getVersionTime(soap, "WS1:getVersionTime", &a->WS1__getVersionTime, ""))
				{	soap_flag_WS1__getVersionTime--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getVersionTime * SOAP_FMAC2 soap_instantiate___WS1__getVersionTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getVersionTime(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getVersionTime *p;
	size_t k = sizeof(struct __WS1__getVersionTime);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getVersionTime, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getVersionTime);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getVersionTime, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getVersionTime location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getVersionTime(struct soap *soap, const struct __WS1__getVersionTime *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getVersionTime(soap, tag ? tag : "-WS1:getVersionTime", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getVersionTime * SOAP_FMAC4 soap_get___WS1__getVersionTime(struct soap *soap, struct __WS1__getVersionTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getVersionTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getGeoIPContext(struct soap *soap, struct __WS1__getGeoIPContext *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getGeoIPContext = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getGeoIPContext(struct soap *soap, const struct __WS1__getGeoIPContext *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getGeoIPContext(soap, &a->WS1__getGeoIPContext);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getGeoIPContext(struct soap *soap, const char *tag, int id, const struct __WS1__getGeoIPContext *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getGeoIPContext(soap, "WS1:getGeoIPContext", -1, &a->WS1__getGeoIPContext, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getGeoIPContext * SOAP_FMAC4 soap_in___WS1__getGeoIPContext(struct soap *soap, const char *tag, struct __WS1__getGeoIPContext *a, const char *type)
{
	size_t soap_flag_WS1__getGeoIPContext = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getGeoIPContext*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getGeoIPContext, sizeof(struct __WS1__getGeoIPContext), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getGeoIPContext(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getGeoIPContext && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getGeoIPContext(soap, "WS1:getGeoIPContext", &a->WS1__getGeoIPContext, ""))
				{	soap_flag_WS1__getGeoIPContext--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getGeoIPContext * SOAP_FMAC2 soap_instantiate___WS1__getGeoIPContext(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getGeoIPContext(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getGeoIPContext *p;
	size_t k = sizeof(struct __WS1__getGeoIPContext);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getGeoIPContext, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getGeoIPContext);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getGeoIPContext, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getGeoIPContext location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getGeoIPContext(struct soap *soap, const struct __WS1__getGeoIPContext *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getGeoIPContext(soap, tag ? tag : "-WS1:getGeoIPContext", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getGeoIPContext * SOAP_FMAC4 soap_get___WS1__getGeoIPContext(struct soap *soap, struct __WS1__getGeoIPContext *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getGeoIPContext(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getCountryCityByIp(struct soap *soap, struct __WS1__getCountryCityByIp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getCountryCityByIp = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getCountryCityByIp(struct soap *soap, const struct __WS1__getCountryCityByIp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getCountryCityByIp(soap, &a->WS1__getCountryCityByIp);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getCountryCityByIp(struct soap *soap, const char *tag, int id, const struct __WS1__getCountryCityByIp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getCountryCityByIp(soap, "WS1:getCountryCityByIp", -1, &a->WS1__getCountryCityByIp, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getCountryCityByIp * SOAP_FMAC4 soap_in___WS1__getCountryCityByIp(struct soap *soap, const char *tag, struct __WS1__getCountryCityByIp *a, const char *type)
{
	size_t soap_flag_WS1__getCountryCityByIp = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getCountryCityByIp*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getCountryCityByIp, sizeof(struct __WS1__getCountryCityByIp), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getCountryCityByIp(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getCountryCityByIp && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getCountryCityByIp(soap, "WS1:getCountryCityByIp", &a->WS1__getCountryCityByIp, ""))
				{	soap_flag_WS1__getCountryCityByIp--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getCountryCityByIp * SOAP_FMAC2 soap_instantiate___WS1__getCountryCityByIp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getCountryCityByIp(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getCountryCityByIp *p;
	size_t k = sizeof(struct __WS1__getCountryCityByIp);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getCountryCityByIp, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getCountryCityByIp);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getCountryCityByIp, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getCountryCityByIp location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getCountryCityByIp(struct soap *soap, const struct __WS1__getCountryCityByIp *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getCountryCityByIp(soap, tag ? tag : "-WS1:getCountryCityByIp", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getCountryCityByIp * SOAP_FMAC4 soap_get___WS1__getCountryCityByIp(struct soap *soap, struct __WS1__getCountryCityByIp *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getCountryCityByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getWeatherbyCityNamePro_(struct soap *soap, struct __WS1__getWeatherbyCityNamePro_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getWeatherbyCityNamePro = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getWeatherbyCityNamePro_(struct soap *soap, const struct __WS1__getWeatherbyCityNamePro_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getWeatherbyCityNamePro(soap, &a->WS1__getWeatherbyCityNamePro);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getWeatherbyCityNamePro_(struct soap *soap, const char *tag, int id, const struct __WS1__getWeatherbyCityNamePro_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getWeatherbyCityNamePro(soap, "WS1:getWeatherbyCityNamePro", -1, &a->WS1__getWeatherbyCityNamePro, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityNamePro_ * SOAP_FMAC4 soap_in___WS1__getWeatherbyCityNamePro_(struct soap *soap, const char *tag, struct __WS1__getWeatherbyCityNamePro_ *a, const char *type)
{
	size_t soap_flag_WS1__getWeatherbyCityNamePro = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getWeatherbyCityNamePro_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getWeatherbyCityNamePro_, sizeof(struct __WS1__getWeatherbyCityNamePro_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getWeatherbyCityNamePro_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getWeatherbyCityNamePro && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getWeatherbyCityNamePro(soap, "WS1:getWeatherbyCityNamePro", &a->WS1__getWeatherbyCityNamePro, ""))
				{	soap_flag_WS1__getWeatherbyCityNamePro--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getWeatherbyCityNamePro_ * SOAP_FMAC2 soap_instantiate___WS1__getWeatherbyCityNamePro_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getWeatherbyCityNamePro_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getWeatherbyCityNamePro_ *p;
	size_t k = sizeof(struct __WS1__getWeatherbyCityNamePro_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getWeatherbyCityNamePro_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getWeatherbyCityNamePro_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getWeatherbyCityNamePro_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getWeatherbyCityNamePro_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getWeatherbyCityNamePro_(struct soap *soap, const struct __WS1__getWeatherbyCityNamePro_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getWeatherbyCityNamePro_(soap, tag ? tag : "-WS1:getWeatherbyCityNamePro", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityNamePro_ * SOAP_FMAC4 soap_get___WS1__getWeatherbyCityNamePro_(struct soap *soap, struct __WS1__getWeatherbyCityNamePro_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getWeatherbyCityNamePro_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getWeatherbyCityName_(struct soap *soap, struct __WS1__getWeatherbyCityName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getWeatherbyCityName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getWeatherbyCityName_(struct soap *soap, const struct __WS1__getWeatherbyCityName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getWeatherbyCityName(soap, &a->WS1__getWeatherbyCityName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getWeatherbyCityName_(struct soap *soap, const char *tag, int id, const struct __WS1__getWeatherbyCityName_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getWeatherbyCityName(soap, "WS1:getWeatherbyCityName", -1, &a->WS1__getWeatherbyCityName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityName_ * SOAP_FMAC4 soap_in___WS1__getWeatherbyCityName_(struct soap *soap, const char *tag, struct __WS1__getWeatherbyCityName_ *a, const char *type)
{
	size_t soap_flag_WS1__getWeatherbyCityName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getWeatherbyCityName_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getWeatherbyCityName_, sizeof(struct __WS1__getWeatherbyCityName_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getWeatherbyCityName_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getWeatherbyCityName && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getWeatherbyCityName(soap, "WS1:getWeatherbyCityName", &a->WS1__getWeatherbyCityName, ""))
				{	soap_flag_WS1__getWeatherbyCityName--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getWeatherbyCityName_ * SOAP_FMAC2 soap_instantiate___WS1__getWeatherbyCityName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getWeatherbyCityName_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getWeatherbyCityName_ *p;
	size_t k = sizeof(struct __WS1__getWeatherbyCityName_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getWeatherbyCityName_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getWeatherbyCityName_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getWeatherbyCityName_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getWeatherbyCityName_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getWeatherbyCityName_(struct soap *soap, const struct __WS1__getWeatherbyCityName_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getWeatherbyCityName_(soap, tag ? tag : "-WS1:getWeatherbyCityName", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityName_ * SOAP_FMAC4 soap_get___WS1__getWeatherbyCityName_(struct soap *soap, struct __WS1__getWeatherbyCityName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getWeatherbyCityName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getSupportDataSet_(struct soap *soap, struct __WS1__getSupportDataSet_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getSupportDataSet = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getSupportDataSet_(struct soap *soap, const struct __WS1__getSupportDataSet_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getSupportDataSet(soap, &a->WS1__getSupportDataSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getSupportDataSet_(struct soap *soap, const char *tag, int id, const struct __WS1__getSupportDataSet_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getSupportDataSet(soap, "WS1:getSupportDataSet", -1, &a->WS1__getSupportDataSet, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportDataSet_ * SOAP_FMAC4 soap_in___WS1__getSupportDataSet_(struct soap *soap, const char *tag, struct __WS1__getSupportDataSet_ *a, const char *type)
{
	size_t soap_flag_WS1__getSupportDataSet = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getSupportDataSet_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getSupportDataSet_, sizeof(struct __WS1__getSupportDataSet_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getSupportDataSet_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getSupportDataSet && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getSupportDataSet(soap, "WS1:getSupportDataSet", &a->WS1__getSupportDataSet, ""))
				{	soap_flag_WS1__getSupportDataSet--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getSupportDataSet_ * SOAP_FMAC2 soap_instantiate___WS1__getSupportDataSet_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getSupportDataSet_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getSupportDataSet_ *p;
	size_t k = sizeof(struct __WS1__getSupportDataSet_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getSupportDataSet_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getSupportDataSet_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getSupportDataSet_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getSupportDataSet_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getSupportDataSet_(struct soap *soap, const struct __WS1__getSupportDataSet_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getSupportDataSet_(soap, tag ? tag : "-WS1:getSupportDataSet", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportDataSet_ * SOAP_FMAC4 soap_get___WS1__getSupportDataSet_(struct soap *soap, struct __WS1__getSupportDataSet_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getSupportDataSet_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getSupportProvince_(struct soap *soap, struct __WS1__getSupportProvince_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getSupportProvince = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getSupportProvince_(struct soap *soap, const struct __WS1__getSupportProvince_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getSupportProvince(soap, &a->WS1__getSupportProvince);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getSupportProvince_(struct soap *soap, const char *tag, int id, const struct __WS1__getSupportProvince_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getSupportProvince(soap, "WS1:getSupportProvince", -1, &a->WS1__getSupportProvince, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportProvince_ * SOAP_FMAC4 soap_in___WS1__getSupportProvince_(struct soap *soap, const char *tag, struct __WS1__getSupportProvince_ *a, const char *type)
{
	size_t soap_flag_WS1__getSupportProvince = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getSupportProvince_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getSupportProvince_, sizeof(struct __WS1__getSupportProvince_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getSupportProvince_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getSupportProvince && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getSupportProvince(soap, "WS1:getSupportProvince", &a->WS1__getSupportProvince, ""))
				{	soap_flag_WS1__getSupportProvince--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getSupportProvince_ * SOAP_FMAC2 soap_instantiate___WS1__getSupportProvince_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getSupportProvince_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getSupportProvince_ *p;
	size_t k = sizeof(struct __WS1__getSupportProvince_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getSupportProvince_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getSupportProvince_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getSupportProvince_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getSupportProvince_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getSupportProvince_(struct soap *soap, const struct __WS1__getSupportProvince_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getSupportProvince_(soap, tag ? tag : "-WS1:getSupportProvince", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportProvince_ * SOAP_FMAC4 soap_get___WS1__getSupportProvince_(struct soap *soap, struct __WS1__getSupportProvince_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getSupportProvince_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getSupportCity_(struct soap *soap, struct __WS1__getSupportCity_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getSupportCity = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getSupportCity_(struct soap *soap, const struct __WS1__getSupportCity_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getSupportCity(soap, &a->WS1__getSupportCity);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getSupportCity_(struct soap *soap, const char *tag, int id, const struct __WS1__getSupportCity_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getSupportCity(soap, "WS1:getSupportCity", -1, &a->WS1__getSupportCity, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportCity_ * SOAP_FMAC4 soap_in___WS1__getSupportCity_(struct soap *soap, const char *tag, struct __WS1__getSupportCity_ *a, const char *type)
{
	size_t soap_flag_WS1__getSupportCity = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getSupportCity_*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getSupportCity_, sizeof(struct __WS1__getSupportCity_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getSupportCity_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getSupportCity && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getSupportCity(soap, "WS1:getSupportCity", &a->WS1__getSupportCity, ""))
				{	soap_flag_WS1__getSupportCity--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getSupportCity_ * SOAP_FMAC2 soap_instantiate___WS1__getSupportCity_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getSupportCity_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getSupportCity_ *p;
	size_t k = sizeof(struct __WS1__getSupportCity_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getSupportCity_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getSupportCity_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getSupportCity_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getSupportCity_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getSupportCity_(struct soap *soap, const struct __WS1__getSupportCity_ *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getSupportCity_(soap, tag ? tag : "-WS1:getSupportCity", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportCity_ * SOAP_FMAC4 soap_get___WS1__getSupportCity_(struct soap *soap, struct __WS1__getSupportCity_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getSupportCity_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getWeatherbyCityNamePro(struct soap *soap, struct __WS1__getWeatherbyCityNamePro *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getWeatherbyCityNamePro = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getWeatherbyCityNamePro(struct soap *soap, const struct __WS1__getWeatherbyCityNamePro *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getWeatherbyCityNamePro(soap, &a->WS1__getWeatherbyCityNamePro);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, int id, const struct __WS1__getWeatherbyCityNamePro *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getWeatherbyCityNamePro(soap, "WS1:getWeatherbyCityNamePro", -1, &a->WS1__getWeatherbyCityNamePro, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_in___WS1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, struct __WS1__getWeatherbyCityNamePro *a, const char *type)
{
	size_t soap_flag_WS1__getWeatherbyCityNamePro = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getWeatherbyCityNamePro*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getWeatherbyCityNamePro, sizeof(struct __WS1__getWeatherbyCityNamePro), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getWeatherbyCityNamePro(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getWeatherbyCityNamePro && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getWeatherbyCityNamePro(soap, "WS1:getWeatherbyCityNamePro", &a->WS1__getWeatherbyCityNamePro, ""))
				{	soap_flag_WS1__getWeatherbyCityNamePro--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate___WS1__getWeatherbyCityNamePro(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getWeatherbyCityNamePro(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getWeatherbyCityNamePro *p;
	size_t k = sizeof(struct __WS1__getWeatherbyCityNamePro);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getWeatherbyCityNamePro, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getWeatherbyCityNamePro);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getWeatherbyCityNamePro, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getWeatherbyCityNamePro location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getWeatherbyCityNamePro(struct soap *soap, const struct __WS1__getWeatherbyCityNamePro *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getWeatherbyCityNamePro(soap, tag ? tag : "-WS1:getWeatherbyCityNamePro", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityNamePro * SOAP_FMAC4 soap_get___WS1__getWeatherbyCityNamePro(struct soap *soap, struct __WS1__getWeatherbyCityNamePro *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getWeatherbyCityNamePro(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getWeatherbyCityName(struct soap *soap, struct __WS1__getWeatherbyCityName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getWeatherbyCityName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getWeatherbyCityName(struct soap *soap, const struct __WS1__getWeatherbyCityName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getWeatherbyCityName(soap, &a->WS1__getWeatherbyCityName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getWeatherbyCityName(struct soap *soap, const char *tag, int id, const struct __WS1__getWeatherbyCityName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getWeatherbyCityName(soap, "WS1:getWeatherbyCityName", -1, &a->WS1__getWeatherbyCityName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityName * SOAP_FMAC4 soap_in___WS1__getWeatherbyCityName(struct soap *soap, const char *tag, struct __WS1__getWeatherbyCityName *a, const char *type)
{
	size_t soap_flag_WS1__getWeatherbyCityName = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getWeatherbyCityName*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getWeatherbyCityName, sizeof(struct __WS1__getWeatherbyCityName), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getWeatherbyCityName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getWeatherbyCityName && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getWeatherbyCityName(soap, "WS1:getWeatherbyCityName", &a->WS1__getWeatherbyCityName, ""))
				{	soap_flag_WS1__getWeatherbyCityName--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate___WS1__getWeatherbyCityName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getWeatherbyCityName(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getWeatherbyCityName *p;
	size_t k = sizeof(struct __WS1__getWeatherbyCityName);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getWeatherbyCityName, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getWeatherbyCityName);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getWeatherbyCityName, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getWeatherbyCityName location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getWeatherbyCityName(struct soap *soap, const struct __WS1__getWeatherbyCityName *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getWeatherbyCityName(soap, tag ? tag : "-WS1:getWeatherbyCityName", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getWeatherbyCityName * SOAP_FMAC4 soap_get___WS1__getWeatherbyCityName(struct soap *soap, struct __WS1__getWeatherbyCityName *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getWeatherbyCityName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getSupportDataSet(struct soap *soap, struct __WS1__getSupportDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getSupportDataSet = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getSupportDataSet(struct soap *soap, const struct __WS1__getSupportDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getSupportDataSet(soap, &a->WS1__getSupportDataSet);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getSupportDataSet(struct soap *soap, const char *tag, int id, const struct __WS1__getSupportDataSet *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getSupportDataSet(soap, "WS1:getSupportDataSet", -1, &a->WS1__getSupportDataSet, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportDataSet * SOAP_FMAC4 soap_in___WS1__getSupportDataSet(struct soap *soap, const char *tag, struct __WS1__getSupportDataSet *a, const char *type)
{
	size_t soap_flag_WS1__getSupportDataSet = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getSupportDataSet*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getSupportDataSet, sizeof(struct __WS1__getSupportDataSet), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getSupportDataSet(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getSupportDataSet && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getSupportDataSet(soap, "WS1:getSupportDataSet", &a->WS1__getSupportDataSet, ""))
				{	soap_flag_WS1__getSupportDataSet--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getSupportDataSet * SOAP_FMAC2 soap_instantiate___WS1__getSupportDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getSupportDataSet(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getSupportDataSet *p;
	size_t k = sizeof(struct __WS1__getSupportDataSet);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getSupportDataSet, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getSupportDataSet);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getSupportDataSet, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getSupportDataSet location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getSupportDataSet(struct soap *soap, const struct __WS1__getSupportDataSet *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getSupportDataSet(soap, tag ? tag : "-WS1:getSupportDataSet", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportDataSet * SOAP_FMAC4 soap_get___WS1__getSupportDataSet(struct soap *soap, struct __WS1__getSupportDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getSupportDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getSupportProvince(struct soap *soap, struct __WS1__getSupportProvince *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getSupportProvince = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getSupportProvince(struct soap *soap, const struct __WS1__getSupportProvince *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getSupportProvince(soap, &a->WS1__getSupportProvince);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getSupportProvince(struct soap *soap, const char *tag, int id, const struct __WS1__getSupportProvince *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getSupportProvince(soap, "WS1:getSupportProvince", -1, &a->WS1__getSupportProvince, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportProvince * SOAP_FMAC4 soap_in___WS1__getSupportProvince(struct soap *soap, const char *tag, struct __WS1__getSupportProvince *a, const char *type)
{
	size_t soap_flag_WS1__getSupportProvince = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getSupportProvince*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getSupportProvince, sizeof(struct __WS1__getSupportProvince), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getSupportProvince(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getSupportProvince && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getSupportProvince(soap, "WS1:getSupportProvince", &a->WS1__getSupportProvince, ""))
				{	soap_flag_WS1__getSupportProvince--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getSupportProvince * SOAP_FMAC2 soap_instantiate___WS1__getSupportProvince(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getSupportProvince(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getSupportProvince *p;
	size_t k = sizeof(struct __WS1__getSupportProvince);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getSupportProvince, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getSupportProvince);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getSupportProvince, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getSupportProvince location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getSupportProvince(struct soap *soap, const struct __WS1__getSupportProvince *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getSupportProvince(soap, tag ? tag : "-WS1:getSupportProvince", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportProvince * SOAP_FMAC4 soap_get___WS1__getSupportProvince(struct soap *soap, struct __WS1__getSupportProvince *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getSupportProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___WS1__getSupportCity(struct soap *soap, struct __WS1__getSupportCity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WS1__getSupportCity = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___WS1__getSupportCity(struct soap *soap, const struct __WS1__getSupportCity *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_WS1__getSupportCity(soap, &a->WS1__getSupportCity);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___WS1__getSupportCity(struct soap *soap, const char *tag, int id, const struct __WS1__getSupportCity *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_WS1__getSupportCity(soap, "WS1:getSupportCity", -1, &a->WS1__getSupportCity, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportCity * SOAP_FMAC4 soap_in___WS1__getSupportCity(struct soap *soap, const char *tag, struct __WS1__getSupportCity *a, const char *type)
{
	size_t soap_flag_WS1__getSupportCity = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __WS1__getSupportCity*)soap_id_enter(soap, "", a, SOAP_TYPE___WS1__getSupportCity, sizeof(struct __WS1__getSupportCity), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___WS1__getSupportCity(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WS1__getSupportCity && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_WS1__getSupportCity(soap, "WS1:getSupportCity", &a->WS1__getSupportCity, ""))
				{	soap_flag_WS1__getSupportCity--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __WS1__getSupportCity * SOAP_FMAC2 soap_instantiate___WS1__getSupportCity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___WS1__getSupportCity(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __WS1__getSupportCity *p;
	size_t k = sizeof(struct __WS1__getSupportCity);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___WS1__getSupportCity, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __WS1__getSupportCity);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __WS1__getSupportCity, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __WS1__getSupportCity location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___WS1__getSupportCity(struct soap *soap, const struct __WS1__getSupportCity *a, const char *tag, const char *type)
{
	if (soap_out___WS1__getSupportCity(soap, tag ? tag : "-WS1:getSupportCity", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __WS1__getSupportCity * SOAP_FMAC4 soap_get___WS1__getSupportCity(struct soap *soap, struct __WS1__getSupportCity *p, const char *tag, const char *type)
{
	if ((p = soap_in___WS1__getSupportCity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getVersionTime(struct soap *soap, _WS1__getVersionTime *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getVersionTime))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getVersionTime(struct soap *soap, const char *tag, int id, _WS1__getVersionTime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getVersionTime, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getVersionTime ? type : NULL);
}

SOAP_FMAC3 _WS1__getVersionTime ** SOAP_FMAC4 soap_in_PointerTo_WS1__getVersionTime(struct soap *soap, const char *tag, _WS1__getVersionTime **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getVersionTime **)soap_malloc(soap, sizeof(_WS1__getVersionTime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getVersionTime *)soap_instantiate__WS1__getVersionTime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getVersionTime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getVersionTime, sizeof(_WS1__getVersionTime), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getVersionTime(struct soap *soap, _WS1__getVersionTime *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getVersionTime(soap, tag ? tag : "WS1:getVersionTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getVersionTime ** SOAP_FMAC4 soap_get_PointerTo_WS1__getVersionTime(struct soap *soap, _WS1__getVersionTime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getVersionTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getGeoIPContext(struct soap *soap, _WS1__getGeoIPContext *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getGeoIPContext))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getGeoIPContext(struct soap *soap, const char *tag, int id, _WS1__getGeoIPContext *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getGeoIPContext, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getGeoIPContext ? type : NULL);
}

SOAP_FMAC3 _WS1__getGeoIPContext ** SOAP_FMAC4 soap_in_PointerTo_WS1__getGeoIPContext(struct soap *soap, const char *tag, _WS1__getGeoIPContext **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getGeoIPContext **)soap_malloc(soap, sizeof(_WS1__getGeoIPContext *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getGeoIPContext *)soap_instantiate__WS1__getGeoIPContext(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getGeoIPContext **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getGeoIPContext, sizeof(_WS1__getGeoIPContext), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getGeoIPContext(struct soap *soap, _WS1__getGeoIPContext *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getGeoIPContext(soap, tag ? tag : "WS1:getGeoIPContext", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getGeoIPContext ** SOAP_FMAC4 soap_get_PointerTo_WS1__getGeoIPContext(struct soap *soap, _WS1__getGeoIPContext **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getGeoIPContext(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getCountryCityByIp(struct soap *soap, _WS1__getCountryCityByIp *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getCountryCityByIp))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getCountryCityByIp(struct soap *soap, const char *tag, int id, _WS1__getCountryCityByIp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getCountryCityByIp, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getCountryCityByIp ? type : NULL);
}

SOAP_FMAC3 _WS1__getCountryCityByIp ** SOAP_FMAC4 soap_in_PointerTo_WS1__getCountryCityByIp(struct soap *soap, const char *tag, _WS1__getCountryCityByIp **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getCountryCityByIp **)soap_malloc(soap, sizeof(_WS1__getCountryCityByIp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getCountryCityByIp *)soap_instantiate__WS1__getCountryCityByIp(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getCountryCityByIp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getCountryCityByIp, sizeof(_WS1__getCountryCityByIp), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getCountryCityByIp(struct soap *soap, _WS1__getCountryCityByIp *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getCountryCityByIp(soap, tag ? tag : "WS1:getCountryCityByIp", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getCountryCityByIp ** SOAP_FMAC4 soap_get_PointerTo_WS1__getCountryCityByIp(struct soap *soap, _WS1__getCountryCityByIp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getCountryCityByIp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getWeatherbyCityNamePro(struct soap *soap, _WS1__getWeatherbyCityNamePro *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getWeatherbyCityNamePro))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, int id, _WS1__getWeatherbyCityNamePro *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getWeatherbyCityNamePro, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getWeatherbyCityNamePro ? type : NULL);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNamePro ** SOAP_FMAC4 soap_in_PointerTo_WS1__getWeatherbyCityNamePro(struct soap *soap, const char *tag, _WS1__getWeatherbyCityNamePro **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getWeatherbyCityNamePro **)soap_malloc(soap, sizeof(_WS1__getWeatherbyCityNamePro *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getWeatherbyCityNamePro *)soap_instantiate__WS1__getWeatherbyCityNamePro(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getWeatherbyCityNamePro **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getWeatherbyCityNamePro, sizeof(_WS1__getWeatherbyCityNamePro), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getWeatherbyCityNamePro(struct soap *soap, _WS1__getWeatherbyCityNamePro *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getWeatherbyCityNamePro(soap, tag ? tag : "WS1:getWeatherbyCityNamePro", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getWeatherbyCityNamePro ** SOAP_FMAC4 soap_get_PointerTo_WS1__getWeatherbyCityNamePro(struct soap *soap, _WS1__getWeatherbyCityNamePro **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getWeatherbyCityNamePro(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getWeatherbyCityName(struct soap *soap, _WS1__getWeatherbyCityName *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getWeatherbyCityName))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getWeatherbyCityName(struct soap *soap, const char *tag, int id, _WS1__getWeatherbyCityName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getWeatherbyCityName, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getWeatherbyCityName ? type : NULL);
}

SOAP_FMAC3 _WS1__getWeatherbyCityName ** SOAP_FMAC4 soap_in_PointerTo_WS1__getWeatherbyCityName(struct soap *soap, const char *tag, _WS1__getWeatherbyCityName **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getWeatherbyCityName **)soap_malloc(soap, sizeof(_WS1__getWeatherbyCityName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getWeatherbyCityName *)soap_instantiate__WS1__getWeatherbyCityName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getWeatherbyCityName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getWeatherbyCityName, sizeof(_WS1__getWeatherbyCityName), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getWeatherbyCityName(struct soap *soap, _WS1__getWeatherbyCityName *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getWeatherbyCityName(soap, tag ? tag : "WS1:getWeatherbyCityName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getWeatherbyCityName ** SOAP_FMAC4 soap_get_PointerTo_WS1__getWeatherbyCityName(struct soap *soap, _WS1__getWeatherbyCityName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getWeatherbyCityName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getSupportDataSet(struct soap *soap, _WS1__getSupportDataSet *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getSupportDataSet))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getSupportDataSet(struct soap *soap, const char *tag, int id, _WS1__getSupportDataSet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getSupportDataSet, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getSupportDataSet ? type : NULL);
}

SOAP_FMAC3 _WS1__getSupportDataSet ** SOAP_FMAC4 soap_in_PointerTo_WS1__getSupportDataSet(struct soap *soap, const char *tag, _WS1__getSupportDataSet **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getSupportDataSet **)soap_malloc(soap, sizeof(_WS1__getSupportDataSet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getSupportDataSet *)soap_instantiate__WS1__getSupportDataSet(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getSupportDataSet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getSupportDataSet, sizeof(_WS1__getSupportDataSet), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getSupportDataSet(struct soap *soap, _WS1__getSupportDataSet *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getSupportDataSet(soap, tag ? tag : "WS1:getSupportDataSet", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getSupportDataSet ** SOAP_FMAC4 soap_get_PointerTo_WS1__getSupportDataSet(struct soap *soap, _WS1__getSupportDataSet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getSupportDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getSupportProvince(struct soap *soap, _WS1__getSupportProvince *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getSupportProvince))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getSupportProvince(struct soap *soap, const char *tag, int id, _WS1__getSupportProvince *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getSupportProvince, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getSupportProvince ? type : NULL);
}

SOAP_FMAC3 _WS1__getSupportProvince ** SOAP_FMAC4 soap_in_PointerTo_WS1__getSupportProvince(struct soap *soap, const char *tag, _WS1__getSupportProvince **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getSupportProvince **)soap_malloc(soap, sizeof(_WS1__getSupportProvince *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getSupportProvince *)soap_instantiate__WS1__getSupportProvince(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getSupportProvince **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getSupportProvince, sizeof(_WS1__getSupportProvince), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getSupportProvince(struct soap *soap, _WS1__getSupportProvince *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getSupportProvince(soap, tag ? tag : "WS1:getSupportProvince", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getSupportProvince ** SOAP_FMAC4 soap_get_PointerTo_WS1__getSupportProvince(struct soap *soap, _WS1__getSupportProvince **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getSupportProvince(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getSupportCity(struct soap *soap, _WS1__getSupportCity *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getSupportCity))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getSupportCity(struct soap *soap, const char *tag, int id, _WS1__getSupportCity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getSupportCity, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getSupportCity ? type : NULL);
}

SOAP_FMAC3 _WS1__getSupportCity ** SOAP_FMAC4 soap_in_PointerTo_WS1__getSupportCity(struct soap *soap, const char *tag, _WS1__getSupportCity **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getSupportCity **)soap_malloc(soap, sizeof(_WS1__getSupportCity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getSupportCity *)soap_instantiate__WS1__getSupportCity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getSupportCity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getSupportCity, sizeof(_WS1__getSupportCity), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getSupportCity(struct soap *soap, _WS1__getSupportCity *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getSupportCity(soap, tag ? tag : "WS1:getSupportCity", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getSupportCity ** SOAP_FMAC4 soap_get_PointerTo_WS1__getSupportCity(struct soap *soap, _WS1__getSupportCity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getSupportCity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _WS1__getSupportDataSetResponse_getSupportDataSetResult *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, int id, _WS1__getSupportDataSetResponse_getSupportDataSetResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult ? type : NULL);
}

SOAP_FMAC3 _WS1__getSupportDataSetResponse_getSupportDataSetResult ** SOAP_FMAC4 soap_in_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, const char *tag, _WS1__getSupportDataSetResponse_getSupportDataSetResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WS1__getSupportDataSetResponse_getSupportDataSetResult **)soap_malloc(soap, sizeof(_WS1__getSupportDataSetResponse_getSupportDataSetResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WS1__getSupportDataSetResponse_getSupportDataSetResult *)soap_instantiate__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_WS1__getSupportDataSetResponse_getSupportDataSetResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult, sizeof(_WS1__getSupportDataSetResponse_getSupportDataSetResult), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _WS1__getSupportDataSetResponse_getSupportDataSetResult *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag ? tag : "WS1:getSupportDataSetResponse-getSupportDataSetResult", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WS1__getSupportDataSetResponse_getSupportDataSetResult ** SOAP_FMAC4 soap_get_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(struct soap *soap, _WS1__getSupportDataSetResponse_getSupportDataSetResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WS1__getSupportDataSetResponse_getSupportDataSetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToWS1__ArrayOfString(struct soap *soap, WS1__ArrayOfString *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_WS1__ArrayOfString))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToWS1__ArrayOfString(struct soap *soap, const char *tag, int id, WS1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS1__ArrayOfString, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_WS1__ArrayOfString ? type : NULL);
}

SOAP_FMAC3 WS1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerToWS1__ArrayOfString(struct soap *soap, const char *tag, WS1__ArrayOfString **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (WS1__ArrayOfString **)soap_malloc(soap, sizeof(WS1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (WS1__ArrayOfString *)soap_instantiate_WS1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (WS1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS1__ArrayOfString, sizeof(WS1__ArrayOfString), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToWS1__ArrayOfString(struct soap *soap, WS1__ArrayOfString *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToWS1__ArrayOfString(soap, tag ? tag : "WS1:ArrayOfString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 WS1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerToWS1__ArrayOfString(struct soap *soap, WS1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToWS1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap *soap, wchar_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_wstring);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap *soap, const char *tag, int id, wchar_t *const*a, const char *type)
{
	return soap_outwstring(soap, tag, id, a, type, SOAP_TYPE_wstring);
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap *soap, const char *tag, wchar_t **a, const char *type)
{
	a = soap_inwstring(soap, tag, a, type, SOAP_TYPE_wstring, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_new_wstring(struct soap *soap, int n)
{
	wchar_t * *a = static_cast<wchar_t * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(wchar_t *)));
	for (wchar_t * *p = a; p && n--; ++p)
		soap_default_wstring(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap *soap, wchar_t *const*a, const char *tag, const char *type)
{
	if (soap_out_wstring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap *soap, wchar_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__wstring(struct soap *soap, std::vector<std::wstring> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__wstring(struct soap *soap, const std::vector<std::wstring> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::wstring> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__wstring(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__wstring(struct soap *soap, const char *tag, int id, const std::vector<std::wstring> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::wstring> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__wstring(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::wstring> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__wstring(struct soap *soap, const char *tag, std::vector<std::wstring> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__wstring(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		std::wstring n;
		soap_default_std__wstring(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_std__wstring, SOAP_TYPE_std__vectorTemplateOfstd__wstring, sizeof(std::wstring), 0, soap_finsert, soap_fbase))
				break;
			if (!soap_in_std__wstring(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__wstring(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::wstring));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::wstring));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::wstring));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::wstring>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__wstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::wstring> *p;
	size_t k = sizeof(std::vector<std::wstring> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__vectorTemplateOfstd__wstring, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<std::wstring> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<std::wstring> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::wstring>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
