/* weather.h
   Generated by wsdl2h 2.8.82 from http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx?wsdl and wsmap.dat
   2019-04-02 07:08:45 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on weather.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

WS1 = "http://WebXml.com.cn/"

*/

#define SOAP_NAMESPACE_OF_WS1	"http://WebXml.com.cn/"
//gsoap WS1   schema namespace:	http://WebXml.com.cn/
//gsoap WS1   schema elementForm:	qualified
//gsoap WS1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in element "xs:schema".
typedef _XML _xsd__schema;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class WS1__ArrayOfString;

class _WS1__getSupportCity;

class _WS1__getSupportCityResponse;

class _WS1__getSupportProvince;

class _WS1__getSupportProvinceResponse;

class _WS1__getSupportDataSet;

class _WS1__getSupportDataSetResponse;

class _WS1__getWeatherbyCityName;

class _WS1__getWeatherbyCityNameResponse;

class _WS1__getWeatherbyCityNamePro;

class _WS1__getWeatherbyCityNameProResponse;

class _WS1__DataSet;

class _WS1__getCountryCityByIp;

class _WS1__getCountryCityByIpResponse;

class _WS1__getGeoIPContext;

class _WS1__getGeoIPContextResponse;

class _WS1__getVersionTime;

class _WS1__getVersionTimeResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://WebXml.com.cn/":ArrayOfString is a complexType.
///
/// @note class WS1__ArrayOfString operations:
/// - WS1__ArrayOfString* soap_new_WS1__ArrayOfString(soap*) allocate and default initialize
/// - WS1__ArrayOfString* soap_new_WS1__ArrayOfString(soap*, int num) allocate and default initialize an array
/// - WS1__ArrayOfString* soap_new_req_WS1__ArrayOfString(soap*, ...) allocate, set required members
/// - WS1__ArrayOfString* soap_new_set_WS1__ArrayOfString(soap*, ...) allocate, set all public members
/// - WS1__ArrayOfString::soap_default(soap*) default initialize members
/// - int soap_read_WS1__ArrayOfString(soap*, WS1__ArrayOfString*) deserialize from a stream
/// - int soap_write_WS1__ArrayOfString(soap*, WS1__ArrayOfString*) serialize to a stream
/// - WS1__ArrayOfString* WS1__ArrayOfString::soap_dup(soap*) returns deep copy of WS1__ArrayOfString, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - WS1__ArrayOfString::soap_del() deep deletes WS1__ArrayOfString data members, use only after WS1__ArrayOfString::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int WS1__ArrayOfString::soap_type() returns SOAP_TYPE_WS1__ArrayOfString or derived type identifier
class WS1__ArrayOfString
{ public:
/// Vector of std::wstring of length 0..unbounded.
    std::vector<std::wstring           > string                         0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCity
/// @brief "http://WebXml.com.cn/":getSupportCity is a complexType.
///
/// @note class _WS1__getSupportCity operations:
/// - _WS1__getSupportCity* soap_new__WS1__getSupportCity(soap*) allocate and default initialize
/// - _WS1__getSupportCity* soap_new__WS1__getSupportCity(soap*, int num) allocate and default initialize an array
/// - _WS1__getSupportCity* soap_new_req__WS1__getSupportCity(soap*, ...) allocate, set required members
/// - _WS1__getSupportCity* soap_new_set__WS1__getSupportCity(soap*, ...) allocate, set all public members
/// - _WS1__getSupportCity::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getSupportCity(soap*, _WS1__getSupportCity*) deserialize from a stream
/// - int soap_write__WS1__getSupportCity(soap*, _WS1__getSupportCity*) serialize to a stream
/// - _WS1__getSupportCity* _WS1__getSupportCity::soap_dup(soap*) returns deep copy of _WS1__getSupportCity, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getSupportCity::soap_del() deep deletes _WS1__getSupportCity data members, use only after _WS1__getSupportCity::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getSupportCity::soap_type() returns SOAP_TYPE__WS1__getSupportCity or derived type identifier
class _WS1__getSupportCity
{ public:
/// Element "byProvinceName" of type xs:string.
    wchar_t*                             byProvinceName                 0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCityResponse
/// @brief "http://WebXml.com.cn/":getSupportCityResponse is a complexType.
///
/// @note class _WS1__getSupportCityResponse operations:
/// - _WS1__getSupportCityResponse* soap_new__WS1__getSupportCityResponse(soap*) allocate and default initialize
/// - _WS1__getSupportCityResponse* soap_new__WS1__getSupportCityResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getSupportCityResponse* soap_new_req__WS1__getSupportCityResponse(soap*, ...) allocate, set required members
/// - _WS1__getSupportCityResponse* soap_new_set__WS1__getSupportCityResponse(soap*, ...) allocate, set all public members
/// - _WS1__getSupportCityResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getSupportCityResponse(soap*, _WS1__getSupportCityResponse*) deserialize from a stream
/// - int soap_write__WS1__getSupportCityResponse(soap*, _WS1__getSupportCityResponse*) serialize to a stream
/// - _WS1__getSupportCityResponse* _WS1__getSupportCityResponse::soap_dup(soap*) returns deep copy of _WS1__getSupportCityResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getSupportCityResponse::soap_del() deep deletes _WS1__getSupportCityResponse data members, use only after _WS1__getSupportCityResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getSupportCityResponse::soap_type() returns SOAP_TYPE__WS1__getSupportCityResponse or derived type identifier
class _WS1__getSupportCityResponse
{ public:
/// Element "getSupportCityResult" of type "http://WebXml.com.cn/":ArrayOfString.
    WS1__ArrayOfString*                  getSupportCityResult           0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportProvince
/// @brief "http://WebXml.com.cn/":getSupportProvince is a complexType.
///
/// @note class _WS1__getSupportProvince operations:
/// - _WS1__getSupportProvince* soap_new__WS1__getSupportProvince(soap*) allocate and default initialize
/// - _WS1__getSupportProvince* soap_new__WS1__getSupportProvince(soap*, int num) allocate and default initialize an array
/// - _WS1__getSupportProvince* soap_new_req__WS1__getSupportProvince(soap*, ...) allocate, set required members
/// - _WS1__getSupportProvince* soap_new_set__WS1__getSupportProvince(soap*, ...) allocate, set all public members
/// - _WS1__getSupportProvince::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getSupportProvince(soap*, _WS1__getSupportProvince*) deserialize from a stream
/// - int soap_write__WS1__getSupportProvince(soap*, _WS1__getSupportProvince*) serialize to a stream
/// - _WS1__getSupportProvince* _WS1__getSupportProvince::soap_dup(soap*) returns deep copy of _WS1__getSupportProvince, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getSupportProvince::soap_del() deep deletes _WS1__getSupportProvince data members, use only after _WS1__getSupportProvince::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getSupportProvince::soap_type() returns SOAP_TYPE__WS1__getSupportProvince or derived type identifier
class _WS1__getSupportProvince
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportProvinceResponse
/// @brief "http://WebXml.com.cn/":getSupportProvinceResponse is a complexType.
///
/// @note class _WS1__getSupportProvinceResponse operations:
/// - _WS1__getSupportProvinceResponse* soap_new__WS1__getSupportProvinceResponse(soap*) allocate and default initialize
/// - _WS1__getSupportProvinceResponse* soap_new__WS1__getSupportProvinceResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getSupportProvinceResponse* soap_new_req__WS1__getSupportProvinceResponse(soap*, ...) allocate, set required members
/// - _WS1__getSupportProvinceResponse* soap_new_set__WS1__getSupportProvinceResponse(soap*, ...) allocate, set all public members
/// - _WS1__getSupportProvinceResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getSupportProvinceResponse(soap*, _WS1__getSupportProvinceResponse*) deserialize from a stream
/// - int soap_write__WS1__getSupportProvinceResponse(soap*, _WS1__getSupportProvinceResponse*) serialize to a stream
/// - _WS1__getSupportProvinceResponse* _WS1__getSupportProvinceResponse::soap_dup(soap*) returns deep copy of _WS1__getSupportProvinceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getSupportProvinceResponse::soap_del() deep deletes _WS1__getSupportProvinceResponse data members, use only after _WS1__getSupportProvinceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getSupportProvinceResponse::soap_type() returns SOAP_TYPE__WS1__getSupportProvinceResponse or derived type identifier
class _WS1__getSupportProvinceResponse
{ public:
/// Element "getSupportProvinceResult" of type "http://WebXml.com.cn/":ArrayOfString.
    WS1__ArrayOfString*                  getSupportProvinceResult       0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportDataSet
/// @brief "http://WebXml.com.cn/":getSupportDataSet is a complexType.
///
/// @note class _WS1__getSupportDataSet operations:
/// - _WS1__getSupportDataSet* soap_new__WS1__getSupportDataSet(soap*) allocate and default initialize
/// - _WS1__getSupportDataSet* soap_new__WS1__getSupportDataSet(soap*, int num) allocate and default initialize an array
/// - _WS1__getSupportDataSet* soap_new_req__WS1__getSupportDataSet(soap*, ...) allocate, set required members
/// - _WS1__getSupportDataSet* soap_new_set__WS1__getSupportDataSet(soap*, ...) allocate, set all public members
/// - _WS1__getSupportDataSet::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getSupportDataSet(soap*, _WS1__getSupportDataSet*) deserialize from a stream
/// - int soap_write__WS1__getSupportDataSet(soap*, _WS1__getSupportDataSet*) serialize to a stream
/// - _WS1__getSupportDataSet* _WS1__getSupportDataSet::soap_dup(soap*) returns deep copy of _WS1__getSupportDataSet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getSupportDataSet::soap_del() deep deletes _WS1__getSupportDataSet data members, use only after _WS1__getSupportDataSet::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getSupportDataSet::soap_type() returns SOAP_TYPE__WS1__getSupportDataSet or derived type identifier
class _WS1__getSupportDataSet
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportDataSetResponse
/// @brief "http://WebXml.com.cn/":getSupportDataSetResponse is a complexType.
///
/// @note class _WS1__getSupportDataSetResponse operations:
/// - _WS1__getSupportDataSetResponse* soap_new__WS1__getSupportDataSetResponse(soap*) allocate and default initialize
/// - _WS1__getSupportDataSetResponse* soap_new__WS1__getSupportDataSetResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getSupportDataSetResponse* soap_new_req__WS1__getSupportDataSetResponse(soap*, ...) allocate, set required members
/// - _WS1__getSupportDataSetResponse* soap_new_set__WS1__getSupportDataSetResponse(soap*, ...) allocate, set all public members
/// - _WS1__getSupportDataSetResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getSupportDataSetResponse(soap*, _WS1__getSupportDataSetResponse*) deserialize from a stream
/// - int soap_write__WS1__getSupportDataSetResponse(soap*, _WS1__getSupportDataSetResponse*) serialize to a stream
/// - _WS1__getSupportDataSetResponse* _WS1__getSupportDataSetResponse::soap_dup(soap*) returns deep copy of _WS1__getSupportDataSetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getSupportDataSetResponse::soap_del() deep deletes _WS1__getSupportDataSetResponse data members, use only after _WS1__getSupportDataSetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getSupportDataSetResponse::soap_type() returns SOAP_TYPE__WS1__getSupportDataSetResponse or derived type identifier
class _WS1__getSupportDataSetResponse
{ public:
/// @note class _WS1__getSupportDataSetResponse_getSupportDataSetResult operations:
/// - _WS1__getSupportDataSetResponse_getSupportDataSetResult* soap_new__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap*) allocate and default initialize
/// - _WS1__getSupportDataSetResponse_getSupportDataSetResult* soap_new__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap*, int num) allocate and default initialize an array
/// - _WS1__getSupportDataSetResponse_getSupportDataSetResult* soap_new_req__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap*, ...) allocate, set required members
/// - _WS1__getSupportDataSetResponse_getSupportDataSetResult* soap_new_set__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap*, ...) allocate, set all public members
/// - _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap*, _WS1__getSupportDataSetResponse_getSupportDataSetResult*) deserialize from a stream
/// - int soap_write__WS1__getSupportDataSetResponse_getSupportDataSetResult(soap*, _WS1__getSupportDataSetResponse_getSupportDataSetResult*) serialize to a stream
/// - _WS1__getSupportDataSetResponse_getSupportDataSetResult* _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_dup(soap*) returns deep copy of _WS1__getSupportDataSetResponse_getSupportDataSetResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_del() deep deletes _WS1__getSupportDataSetResponse_getSupportDataSetResult data members, use only after _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getSupportDataSetResponse_getSupportDataSetResult::soap_type() returns SOAP_TYPE__WS1__getSupportDataSetResponse_getSupportDataSetResult or derived type identifier
    class _WS1__getSupportDataSetResponse_getSupportDataSetResult
    { public:
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Store any element content in XML string.
    }                                   *getSupportDataSetResult        0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityName
/// @brief "http://WebXml.com.cn/":getWeatherbyCityName is a complexType.
///
/// @note class _WS1__getWeatherbyCityName operations:
/// - _WS1__getWeatherbyCityName* soap_new__WS1__getWeatherbyCityName(soap*) allocate and default initialize
/// - _WS1__getWeatherbyCityName* soap_new__WS1__getWeatherbyCityName(soap*, int num) allocate and default initialize an array
/// - _WS1__getWeatherbyCityName* soap_new_req__WS1__getWeatherbyCityName(soap*, ...) allocate, set required members
/// - _WS1__getWeatherbyCityName* soap_new_set__WS1__getWeatherbyCityName(soap*, ...) allocate, set all public members
/// - _WS1__getWeatherbyCityName::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getWeatherbyCityName(soap*, _WS1__getWeatherbyCityName*) deserialize from a stream
/// - int soap_write__WS1__getWeatherbyCityName(soap*, _WS1__getWeatherbyCityName*) serialize to a stream
/// - _WS1__getWeatherbyCityName* _WS1__getWeatherbyCityName::soap_dup(soap*) returns deep copy of _WS1__getWeatherbyCityName, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getWeatherbyCityName::soap_del() deep deletes _WS1__getWeatherbyCityName data members, use only after _WS1__getWeatherbyCityName::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getWeatherbyCityName::soap_type() returns SOAP_TYPE__WS1__getWeatherbyCityName or derived type identifier
class _WS1__getWeatherbyCityName
{ public:
/// Element "theCityName" of type xs:string.
    wchar_t*                             theCityName                    0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityNameResponse
/// @brief "http://WebXml.com.cn/":getWeatherbyCityNameResponse is a complexType.
///
/// @note class _WS1__getWeatherbyCityNameResponse operations:
/// - _WS1__getWeatherbyCityNameResponse* soap_new__WS1__getWeatherbyCityNameResponse(soap*) allocate and default initialize
/// - _WS1__getWeatherbyCityNameResponse* soap_new__WS1__getWeatherbyCityNameResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getWeatherbyCityNameResponse* soap_new_req__WS1__getWeatherbyCityNameResponse(soap*, ...) allocate, set required members
/// - _WS1__getWeatherbyCityNameResponse* soap_new_set__WS1__getWeatherbyCityNameResponse(soap*, ...) allocate, set all public members
/// - _WS1__getWeatherbyCityNameResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getWeatherbyCityNameResponse(soap*, _WS1__getWeatherbyCityNameResponse*) deserialize from a stream
/// - int soap_write__WS1__getWeatherbyCityNameResponse(soap*, _WS1__getWeatherbyCityNameResponse*) serialize to a stream
/// - _WS1__getWeatherbyCityNameResponse* _WS1__getWeatherbyCityNameResponse::soap_dup(soap*) returns deep copy of _WS1__getWeatherbyCityNameResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getWeatherbyCityNameResponse::soap_del() deep deletes _WS1__getWeatherbyCityNameResponse data members, use only after _WS1__getWeatherbyCityNameResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getWeatherbyCityNameResponse::soap_type() returns SOAP_TYPE__WS1__getWeatherbyCityNameResponse or derived type identifier
class _WS1__getWeatherbyCityNameResponse
{ public:
/// Element "getWeatherbyCityNameResult" of type "http://WebXml.com.cn/":ArrayOfString.
    WS1__ArrayOfString*                  getWeatherbyCityNameResult     0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityNamePro
/// @brief "http://WebXml.com.cn/":getWeatherbyCityNamePro is a complexType.
///
/// @note class _WS1__getWeatherbyCityNamePro operations:
/// - _WS1__getWeatherbyCityNamePro* soap_new__WS1__getWeatherbyCityNamePro(soap*) allocate and default initialize
/// - _WS1__getWeatherbyCityNamePro* soap_new__WS1__getWeatherbyCityNamePro(soap*, int num) allocate and default initialize an array
/// - _WS1__getWeatherbyCityNamePro* soap_new_req__WS1__getWeatherbyCityNamePro(soap*, ...) allocate, set required members
/// - _WS1__getWeatherbyCityNamePro* soap_new_set__WS1__getWeatherbyCityNamePro(soap*, ...) allocate, set all public members
/// - _WS1__getWeatherbyCityNamePro::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getWeatherbyCityNamePro(soap*, _WS1__getWeatherbyCityNamePro*) deserialize from a stream
/// - int soap_write__WS1__getWeatherbyCityNamePro(soap*, _WS1__getWeatherbyCityNamePro*) serialize to a stream
/// - _WS1__getWeatherbyCityNamePro* _WS1__getWeatherbyCityNamePro::soap_dup(soap*) returns deep copy of _WS1__getWeatherbyCityNamePro, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getWeatherbyCityNamePro::soap_del() deep deletes _WS1__getWeatherbyCityNamePro data members, use only after _WS1__getWeatherbyCityNamePro::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getWeatherbyCityNamePro::soap_type() returns SOAP_TYPE__WS1__getWeatherbyCityNamePro or derived type identifier
class _WS1__getWeatherbyCityNamePro
{ public:
/// Element "theCityName" of type xs:string.
    wchar_t*                             theCityName                    0;	///< Optional element.
/// Element "theUserID" of type xs:string.
    wchar_t*                             theUserID                      0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherbyCityNameProResponse
/// @brief "http://WebXml.com.cn/":getWeatherbyCityNameProResponse is a complexType.
///
/// @note class _WS1__getWeatherbyCityNameProResponse operations:
/// - _WS1__getWeatherbyCityNameProResponse* soap_new__WS1__getWeatherbyCityNameProResponse(soap*) allocate and default initialize
/// - _WS1__getWeatherbyCityNameProResponse* soap_new__WS1__getWeatherbyCityNameProResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getWeatherbyCityNameProResponse* soap_new_req__WS1__getWeatherbyCityNameProResponse(soap*, ...) allocate, set required members
/// - _WS1__getWeatherbyCityNameProResponse* soap_new_set__WS1__getWeatherbyCityNameProResponse(soap*, ...) allocate, set all public members
/// - _WS1__getWeatherbyCityNameProResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getWeatherbyCityNameProResponse(soap*, _WS1__getWeatherbyCityNameProResponse*) deserialize from a stream
/// - int soap_write__WS1__getWeatherbyCityNameProResponse(soap*, _WS1__getWeatherbyCityNameProResponse*) serialize to a stream
/// - _WS1__getWeatherbyCityNameProResponse* _WS1__getWeatherbyCityNameProResponse::soap_dup(soap*) returns deep copy of _WS1__getWeatherbyCityNameProResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getWeatherbyCityNameProResponse::soap_del() deep deletes _WS1__getWeatherbyCityNameProResponse data members, use only after _WS1__getWeatherbyCityNameProResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getWeatherbyCityNameProResponse::soap_type() returns SOAP_TYPE__WS1__getWeatherbyCityNameProResponse or derived type identifier
class _WS1__getWeatherbyCityNameProResponse
{ public:
/// Element "getWeatherbyCityNameProResult" of type "http://WebXml.com.cn/":ArrayOfString.
    WS1__ArrayOfString*                  getWeatherbyCityNameProResult  0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":DataSet
/// @brief "http://WebXml.com.cn/":DataSet is a complexType.
///
/// @note class _WS1__DataSet operations:
/// - _WS1__DataSet* soap_new__WS1__DataSet(soap*) allocate and default initialize
/// - _WS1__DataSet* soap_new__WS1__DataSet(soap*, int num) allocate and default initialize an array
/// - _WS1__DataSet* soap_new_req__WS1__DataSet(soap*, ...) allocate, set required members
/// - _WS1__DataSet* soap_new_set__WS1__DataSet(soap*, ...) allocate, set all public members
/// - _WS1__DataSet::soap_default(soap*) default initialize members
/// - int soap_read__WS1__DataSet(soap*, _WS1__DataSet*) deserialize from a stream
/// - int soap_write__WS1__DataSet(soap*, _WS1__DataSet*) serialize to a stream
/// - _WS1__DataSet* _WS1__DataSet::soap_dup(soap*) returns deep copy of _WS1__DataSet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__DataSet::soap_del() deep deletes _WS1__DataSet data members, use only after _WS1__DataSet::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__DataSet::soap_type() returns SOAP_TYPE__WS1__DataSet or derived type identifier
class _WS1__DataSet
{ public:
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Store any element content in XML string.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getCountryCityByIp
/// @brief "http://WebXml.com.cn/":getCountryCityByIp is a complexType.
///
/// @note class _WS1__getCountryCityByIp operations:
/// - _WS1__getCountryCityByIp* soap_new__WS1__getCountryCityByIp(soap*) allocate and default initialize
/// - _WS1__getCountryCityByIp* soap_new__WS1__getCountryCityByIp(soap*, int num) allocate and default initialize an array
/// - _WS1__getCountryCityByIp* soap_new_req__WS1__getCountryCityByIp(soap*, ...) allocate, set required members
/// - _WS1__getCountryCityByIp* soap_new_set__WS1__getCountryCityByIp(soap*, ...) allocate, set all public members
/// - _WS1__getCountryCityByIp::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getCountryCityByIp(soap*, _WS1__getCountryCityByIp*) deserialize from a stream
/// - int soap_write__WS1__getCountryCityByIp(soap*, _WS1__getCountryCityByIp*) serialize to a stream
/// - _WS1__getCountryCityByIp* _WS1__getCountryCityByIp::soap_dup(soap*) returns deep copy of _WS1__getCountryCityByIp, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getCountryCityByIp::soap_del() deep deletes _WS1__getCountryCityByIp data members, use only after _WS1__getCountryCityByIp::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getCountryCityByIp::soap_type() returns SOAP_TYPE__WS1__getCountryCityByIp or derived type identifier
class _WS1__getCountryCityByIp
{ public:
/// Element "theIpAddress" of type xs:string.
    wchar_t*                             theIpAddress                   0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getCountryCityByIpResponse
/// @brief "http://WebXml.com.cn/":getCountryCityByIpResponse is a complexType.
///
/// @note class _WS1__getCountryCityByIpResponse operations:
/// - _WS1__getCountryCityByIpResponse* soap_new__WS1__getCountryCityByIpResponse(soap*) allocate and default initialize
/// - _WS1__getCountryCityByIpResponse* soap_new__WS1__getCountryCityByIpResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getCountryCityByIpResponse* soap_new_req__WS1__getCountryCityByIpResponse(soap*, ...) allocate, set required members
/// - _WS1__getCountryCityByIpResponse* soap_new_set__WS1__getCountryCityByIpResponse(soap*, ...) allocate, set all public members
/// - _WS1__getCountryCityByIpResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getCountryCityByIpResponse(soap*, _WS1__getCountryCityByIpResponse*) deserialize from a stream
/// - int soap_write__WS1__getCountryCityByIpResponse(soap*, _WS1__getCountryCityByIpResponse*) serialize to a stream
/// - _WS1__getCountryCityByIpResponse* _WS1__getCountryCityByIpResponse::soap_dup(soap*) returns deep copy of _WS1__getCountryCityByIpResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getCountryCityByIpResponse::soap_del() deep deletes _WS1__getCountryCityByIpResponse data members, use only after _WS1__getCountryCityByIpResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getCountryCityByIpResponse::soap_type() returns SOAP_TYPE__WS1__getCountryCityByIpResponse or derived type identifier
class _WS1__getCountryCityByIpResponse
{ public:
/// Element "getCountryCityByIpResult" of type "http://WebXml.com.cn/":ArrayOfString.
    WS1__ArrayOfString*                  getCountryCityByIpResult       0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getGeoIPContext
/// @brief "http://WebXml.com.cn/":getGeoIPContext is a complexType.
///
/// @note class _WS1__getGeoIPContext operations:
/// - _WS1__getGeoIPContext* soap_new__WS1__getGeoIPContext(soap*) allocate and default initialize
/// - _WS1__getGeoIPContext* soap_new__WS1__getGeoIPContext(soap*, int num) allocate and default initialize an array
/// - _WS1__getGeoIPContext* soap_new_req__WS1__getGeoIPContext(soap*, ...) allocate, set required members
/// - _WS1__getGeoIPContext* soap_new_set__WS1__getGeoIPContext(soap*, ...) allocate, set all public members
/// - _WS1__getGeoIPContext::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getGeoIPContext(soap*, _WS1__getGeoIPContext*) deserialize from a stream
/// - int soap_write__WS1__getGeoIPContext(soap*, _WS1__getGeoIPContext*) serialize to a stream
/// - _WS1__getGeoIPContext* _WS1__getGeoIPContext::soap_dup(soap*) returns deep copy of _WS1__getGeoIPContext, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getGeoIPContext::soap_del() deep deletes _WS1__getGeoIPContext data members, use only after _WS1__getGeoIPContext::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getGeoIPContext::soap_type() returns SOAP_TYPE__WS1__getGeoIPContext or derived type identifier
class _WS1__getGeoIPContext
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getGeoIPContextResponse
/// @brief "http://WebXml.com.cn/":getGeoIPContextResponse is a complexType.
///
/// @note class _WS1__getGeoIPContextResponse operations:
/// - _WS1__getGeoIPContextResponse* soap_new__WS1__getGeoIPContextResponse(soap*) allocate and default initialize
/// - _WS1__getGeoIPContextResponse* soap_new__WS1__getGeoIPContextResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getGeoIPContextResponse* soap_new_req__WS1__getGeoIPContextResponse(soap*, ...) allocate, set required members
/// - _WS1__getGeoIPContextResponse* soap_new_set__WS1__getGeoIPContextResponse(soap*, ...) allocate, set all public members
/// - _WS1__getGeoIPContextResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getGeoIPContextResponse(soap*, _WS1__getGeoIPContextResponse*) deserialize from a stream
/// - int soap_write__WS1__getGeoIPContextResponse(soap*, _WS1__getGeoIPContextResponse*) serialize to a stream
/// - _WS1__getGeoIPContextResponse* _WS1__getGeoIPContextResponse::soap_dup(soap*) returns deep copy of _WS1__getGeoIPContextResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getGeoIPContextResponse::soap_del() deep deletes _WS1__getGeoIPContextResponse data members, use only after _WS1__getGeoIPContextResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getGeoIPContextResponse::soap_type() returns SOAP_TYPE__WS1__getGeoIPContextResponse or derived type identifier
class _WS1__getGeoIPContextResponse
{ public:
/// Element "getGeoIPContextResult" of type "http://WebXml.com.cn/":ArrayOfString.
    WS1__ArrayOfString*                  getGeoIPContextResult          0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getVersionTime
/// @brief "http://WebXml.com.cn/":getVersionTime is a complexType.
///
/// @note class _WS1__getVersionTime operations:
/// - _WS1__getVersionTime* soap_new__WS1__getVersionTime(soap*) allocate and default initialize
/// - _WS1__getVersionTime* soap_new__WS1__getVersionTime(soap*, int num) allocate and default initialize an array
/// - _WS1__getVersionTime* soap_new_req__WS1__getVersionTime(soap*, ...) allocate, set required members
/// - _WS1__getVersionTime* soap_new_set__WS1__getVersionTime(soap*, ...) allocate, set all public members
/// - _WS1__getVersionTime::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getVersionTime(soap*, _WS1__getVersionTime*) deserialize from a stream
/// - int soap_write__WS1__getVersionTime(soap*, _WS1__getVersionTime*) serialize to a stream
/// - _WS1__getVersionTime* _WS1__getVersionTime::soap_dup(soap*) returns deep copy of _WS1__getVersionTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getVersionTime::soap_del() deep deletes _WS1__getVersionTime data members, use only after _WS1__getVersionTime::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getVersionTime::soap_type() returns SOAP_TYPE__WS1__getVersionTime or derived type identifier
class _WS1__getVersionTime
{ public:
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getVersionTimeResponse
/// @brief "http://WebXml.com.cn/":getVersionTimeResponse is a complexType.
///
/// @note class _WS1__getVersionTimeResponse operations:
/// - _WS1__getVersionTimeResponse* soap_new__WS1__getVersionTimeResponse(soap*) allocate and default initialize
/// - _WS1__getVersionTimeResponse* soap_new__WS1__getVersionTimeResponse(soap*, int num) allocate and default initialize an array
/// - _WS1__getVersionTimeResponse* soap_new_req__WS1__getVersionTimeResponse(soap*, ...) allocate, set required members
/// - _WS1__getVersionTimeResponse* soap_new_set__WS1__getVersionTimeResponse(soap*, ...) allocate, set all public members
/// - _WS1__getVersionTimeResponse::soap_default(soap*) default initialize members
/// - int soap_read__WS1__getVersionTimeResponse(soap*, _WS1__getVersionTimeResponse*) deserialize from a stream
/// - int soap_write__WS1__getVersionTimeResponse(soap*, _WS1__getVersionTimeResponse*) serialize to a stream
/// - _WS1__getVersionTimeResponse* _WS1__getVersionTimeResponse::soap_dup(soap*) returns deep copy of _WS1__getVersionTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _WS1__getVersionTimeResponse::soap_del() deep deletes _WS1__getVersionTimeResponse data members, use only after _WS1__getVersionTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _WS1__getVersionTimeResponse::soap_type() returns SOAP_TYPE__WS1__getVersionTimeResponse or derived type identifier
class _WS1__getVersionTimeResponse
{ public:
/// Element "getVersionTimeResult" of type xs:string.
    wchar_t*                             getVersionTimeResult           0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://WebXml.com.cn/":ArrayOfString of type "http://WebXml.com.cn/":ArrayOfString.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://WebXml.com.cn/":string of type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap WS1  service name:	WeatherWebServiceSoap 
//gsoap WS1  service type:	WeatherWebServiceSoap 
//gsoap WS1  service port:	http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx 
//gsoap WS1  service port:	http://www.webxml.com.cn/WebServices/WeatherWebService.asmx 
//gsoap WS1  service namespace:	http://WebXml.com.cn/ 
//gsoap WS1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage WSDL Definitions

@section WSDL_bindings Service Bindings

  - @ref WeatherWebServiceSoap

@section WSDL_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page WeatherWebServiceSoap Binding "WeatherWebServiceSoap"

@section WeatherWebServiceSoap_service Service Documentation "WeatherWebServiceSoap"
<a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>IP
WEB </strong>IPIP37IPIP</br>IPWeb
Services<a href="http://www.webxml.com.cn/zh_cn/contact_us.aspx"
target="_blank"></a> QQ8409035<br /><strong>
WEB http://www.webxml.com.cn/ </strong><br
/><br />&nbsp;

@section WeatherWebServiceSoap_operations Operations of Binding "WeatherWebServiceSoap"

  - @ref __WS1__getSupportCity

  - @ref __WS1__getSupportProvince

  - @ref __WS1__getSupportDataSet

  - @ref __WS1__getWeatherbyCityName

  - @ref __WS1__getWeatherbyCityNamePro

  - @ref __WS1__getSupportCity_

  - @ref __WS1__getSupportProvince_

  - @ref __WS1__getSupportDataSet_

  - @ref __WS1__getWeatherbyCityName_

  - @ref __WS1__getWeatherbyCityNamePro_

  - @ref __WS1__getCountryCityByIp

  - @ref __WS1__getGeoIPContext

  - @ref __WS1__getVersionTime

  - @ref __WS1__getCountryCityByIp_

  - @ref __WS1__getGeoIPContext_

  - @ref __WS1__getVersionTime_

@section WeatherWebServiceSoap_ports Default endpoints of Binding "WeatherWebServiceSoap"

  - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx

  - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WeatherWebServiceSoap                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getSupportCity                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getSupportCity" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>byProvinceName
= ALL
String()()</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportCity"

  - Addressing input action: "http://WebXml.com.cn/getSupportCity"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getSupportCity(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getSupportCity*               WS1__getSupportCity,
    // output parameters:
    _WS1__getSupportCityResponse       &WS1__getSupportCityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getSupportCity(
    struct soap *soap,
    // input parameters:
    _WS1__getSupportCity*               WS1__getSupportCity,
    // output parameters:
    _WS1__getSupportCityResponse       &WS1__getSupportCityResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getSupportCity SOAP
//gsoap WS1  service method-style:	getSupportCity document
//gsoap WS1  service method-encoding:	getSupportCity literal
//gsoap WS1  service method-input-action:	getSupportCity http://WebXml.com.cn/getSupportCity
//gsoap WS1  service method-output-action:	getSupportCity http://WebXml.com.cn/getSupportCityResponse
int __WS1__getSupportCity(
    _WS1__getSupportCity*               WS1__getSupportCity,	///< Input parameter
    _WS1__getSupportCityResponse       &WS1__getSupportCityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getSupportProvince                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getSupportProvince" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>
 String()</p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportProvince"

  - Addressing input action: "http://WebXml.com.cn/getSupportProvince"

  - Addressing output action: "http://WebXml.com.cn/getSupportProvinceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getSupportProvince(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getSupportProvince*           WS1__getSupportProvince,
    // output parameters:
    _WS1__getSupportProvinceResponse   &WS1__getSupportProvinceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getSupportProvince(
    struct soap *soap,
    // input parameters:
    _WS1__getSupportProvince*           WS1__getSupportProvince,
    // output parameters:
    _WS1__getSupportProvinceResponse   &WS1__getSupportProvinceResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getSupportProvince SOAP
//gsoap WS1  service method-style:	getSupportProvince document
//gsoap WS1  service method-encoding:	getSupportProvince literal
//gsoap WS1  service method-input-action:	getSupportProvince http://WebXml.com.cn/getSupportProvince
//gsoap WS1  service method-output-action:	getSupportProvince http://WebXml.com.cn/getSupportProvinceResponse
int __WS1__getSupportProvince(
    _WS1__getSupportProvince*           WS1__getSupportProvince,	///< Input parameter
    _WS1__getSupportProvinceResponse   &WS1__getSupportProvinceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getSupportDataSet                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getSupportDataSet" of service binding "WeatherWebServiceSoap".
<br><h3>Web Services</h3><p>DataSet
DataSet.Tables(0) DataSet.Tables(1) DataSet.Tables(0).Rows(i).Item("ID")
 DataSet.Tables(1).Rows(i).Item("ZoneID") <br />Tables(0)ID
= IDZone = Tables(1)ID ZoneID = Tables(0)IDArea
= AreaCode = </p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportDataSet"

  - Addressing input action: "http://WebXml.com.cn/getSupportDataSet"

  - Addressing output action: "http://WebXml.com.cn/getSupportDataSetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getSupportDataSet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getSupportDataSet*            WS1__getSupportDataSet,
    // output parameters:
    _WS1__getSupportDataSetResponse    &WS1__getSupportDataSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getSupportDataSet(
    struct soap *soap,
    // input parameters:
    _WS1__getSupportDataSet*            WS1__getSupportDataSet,
    // output parameters:
    _WS1__getSupportDataSetResponse    &WS1__getSupportDataSetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getSupportDataSet SOAP
//gsoap WS1  service method-style:	getSupportDataSet document
//gsoap WS1  service method-encoding:	getSupportDataSet literal
//gsoap WS1  service method-input-action:	getSupportDataSet http://WebXml.com.cn/getSupportDataSet
//gsoap WS1  service method-output-action:	getSupportDataSet http://WebXml.com.cn/getSupportDataSetResponse
int __WS1__getSupportDataSet(
    _WS1__getSupportDataSet*            WS1__getSupportDataSet,	///< Input parameter
    _WS1__getSupportDataSetResponse    &WS1__getSupportDataSetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getWeatherbyCityName                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getWeatherbyCityName" of service binding "WeatherWebServiceSoap".
<br><h3></h3><p>theCityName
= ()()
 58367( getSupportCity
 getSupportDataSet )  String(22)23<br
/>String(0)  String(4)String(5)
 String(11) ()()String(12)
 String(16) String(17)
 String(21) String(22)
 <br /><a href="http://www.webxml.com.cn/images/weather.zip"><img
src="http://www.webxml.com.cn/images/download_w.gif" border="0" align="absbottom"
/></a>() <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx"
target="_blank"></a> <a href="http://www.webxml.com.cn/files/weather_eg.zip">Web
Services</a> (VB ASP.net 2.0)</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getWeatherbyCityName(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getWeatherbyCityName*         WS1__getWeatherbyCityName,
    // output parameters:
    _WS1__getWeatherbyCityNameResponse &WS1__getWeatherbyCityNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getWeatherbyCityName(
    struct soap *soap,
    // input parameters:
    _WS1__getWeatherbyCityName*         WS1__getWeatherbyCityName,
    // output parameters:
    _WS1__getWeatherbyCityNameResponse &WS1__getWeatherbyCityNameResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getWeatherbyCityName SOAP
//gsoap WS1  service method-style:	getWeatherbyCityName document
//gsoap WS1  service method-encoding:	getWeatherbyCityName literal
//gsoap WS1  service method-input-action:	getWeatherbyCityName http://WebXml.com.cn/getWeatherbyCityName
//gsoap WS1  service method-output-action:	getWeatherbyCityName http://WebXml.com.cn/getWeatherbyCityNameResponse
int __WS1__getWeatherbyCityName(
    _WS1__getWeatherbyCityName*         WS1__getWeatherbyCityName,	///< Input parameter
    _WS1__getWeatherbyCityNameResponse &WS1__getWeatherbyCityNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getWeatherbyCityNamePro                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getWeatherbyCityNamePro" of service binding "WeatherWebServiceSoap".
<br><h3>For</h3><p>
getWeatherbyCityNametheUserID = ID</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameProResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getWeatherbyCityNamePro(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getWeatherbyCityNamePro*      WS1__getWeatherbyCityNamePro,
    // output parameters:
    _WS1__getWeatherbyCityNameProResponse&WS1__getWeatherbyCityNameProResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getWeatherbyCityNamePro(
    struct soap *soap,
    // input parameters:
    _WS1__getWeatherbyCityNamePro*      WS1__getWeatherbyCityNamePro,
    // output parameters:
    _WS1__getWeatherbyCityNameProResponse&WS1__getWeatherbyCityNameProResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getWeatherbyCityNamePro SOAP
//gsoap WS1  service method-style:	getWeatherbyCityNamePro document
//gsoap WS1  service method-encoding:	getWeatherbyCityNamePro literal
//gsoap WS1  service method-input-action:	getWeatherbyCityNamePro http://WebXml.com.cn/getWeatherbyCityNamePro
//gsoap WS1  service method-output-action:	getWeatherbyCityNamePro http://WebXml.com.cn/getWeatherbyCityNameProResponse
int __WS1__getWeatherbyCityNamePro(
    _WS1__getWeatherbyCityNamePro*      WS1__getWeatherbyCityNamePro,	///< Input parameter
    _WS1__getWeatherbyCityNameProResponse&WS1__getWeatherbyCityNameProResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getSupportCity_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getSupportCity_" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>byProvinceName
= ALL
String()()</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportCity"

  - Addressing input action: "http://WebXml.com.cn/getSupportCity"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getSupportCity_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getSupportCity*               WS1__getSupportCity,
    // output parameters:
    _WS1__getSupportCityResponse       &WS1__getSupportCityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getSupportCity_(
    struct soap *soap,
    // input parameters:
    _WS1__getSupportCity*               WS1__getSupportCity,
    // output parameters:
    _WS1__getSupportCityResponse       &WS1__getSupportCityResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getSupportCity_ SOAP
//gsoap WS1  service method-style:	getSupportCity_ document
//gsoap WS1  service method-encoding:	getSupportCity_ literal
//gsoap WS1  service method-input-action:	getSupportCity_ http://WebXml.com.cn/getSupportCity
//gsoap WS1  service method-output-action:	getSupportCity_ http://WebXml.com.cn/getSupportCityResponse
int __WS1__getSupportCity_(
    _WS1__getSupportCity*               WS1__getSupportCity,	///< Input parameter
    _WS1__getSupportCityResponse       &WS1__getSupportCityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getSupportProvince_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getSupportProvince_" of service binding "WeatherWebServiceSoap".
<br /><h3>Web Services</h3><p>
 String()</p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportProvince"

  - Addressing input action: "http://WebXml.com.cn/getSupportProvince"

  - Addressing output action: "http://WebXml.com.cn/getSupportProvinceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getSupportProvince_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getSupportProvince*           WS1__getSupportProvince,
    // output parameters:
    _WS1__getSupportProvinceResponse   &WS1__getSupportProvinceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getSupportProvince_(
    struct soap *soap,
    // input parameters:
    _WS1__getSupportProvince*           WS1__getSupportProvince,
    // output parameters:
    _WS1__getSupportProvinceResponse   &WS1__getSupportProvinceResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getSupportProvince_ SOAP
//gsoap WS1  service method-style:	getSupportProvince_ document
//gsoap WS1  service method-encoding:	getSupportProvince_ literal
//gsoap WS1  service method-input-action:	getSupportProvince_ http://WebXml.com.cn/getSupportProvince
//gsoap WS1  service method-output-action:	getSupportProvince_ http://WebXml.com.cn/getSupportProvinceResponse
int __WS1__getSupportProvince_(
    _WS1__getSupportProvince*           WS1__getSupportProvince,	///< Input parameter
    _WS1__getSupportProvinceResponse   &WS1__getSupportProvinceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getSupportDataSet_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getSupportDataSet_" of service binding "WeatherWebServiceSoap".
<br><h3>Web Services</h3><p>DataSet
DataSet.Tables(0) DataSet.Tables(1) DataSet.Tables(0).Rows(i).Item("ID")
 DataSet.Tables(1).Rows(i).Item("ZoneID") <br />Tables(0)ID
= IDZone = Tables(1)ID ZoneID = Tables(0)IDArea
= AreaCode = </p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportDataSet"

  - Addressing input action: "http://WebXml.com.cn/getSupportDataSet"

  - Addressing output action: "http://WebXml.com.cn/getSupportDataSetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getSupportDataSet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getSupportDataSet*            WS1__getSupportDataSet,
    // output parameters:
    _WS1__getSupportDataSetResponse    &WS1__getSupportDataSetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getSupportDataSet_(
    struct soap *soap,
    // input parameters:
    _WS1__getSupportDataSet*            WS1__getSupportDataSet,
    // output parameters:
    _WS1__getSupportDataSetResponse    &WS1__getSupportDataSetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getSupportDataSet_ SOAP
//gsoap WS1  service method-style:	getSupportDataSet_ document
//gsoap WS1  service method-encoding:	getSupportDataSet_ literal
//gsoap WS1  service method-input-action:	getSupportDataSet_ http://WebXml.com.cn/getSupportDataSet
//gsoap WS1  service method-output-action:	getSupportDataSet_ http://WebXml.com.cn/getSupportDataSetResponse
int __WS1__getSupportDataSet_(
    _WS1__getSupportDataSet*            WS1__getSupportDataSet,	///< Input parameter
    _WS1__getSupportDataSetResponse    &WS1__getSupportDataSetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getWeatherbyCityName_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getWeatherbyCityName_" of service binding "WeatherWebServiceSoap".
<br><h3></h3><p>theCityName
= ()()
 58367( getSupportCity
 getSupportDataSet )  String(22)23<br
/>String(0)  String(4)String(5)
 String(11) ()()String(12)
 String(16) String(17)
 String(21) String(22)
 <br /><a href="http://www.webxml.com.cn/images/weather.zip"><img
src="http://www.webxml.com.cn/images/download_w.gif" border="0" align="absbottom"
/></a>() <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx"
target="_blank"></a> <a href="http://www.webxml.com.cn/files/weather_eg.zip">Web
Services</a> (VB ASP.net 2.0)</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityName"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getWeatherbyCityName_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getWeatherbyCityName*         WS1__getWeatherbyCityName,
    // output parameters:
    _WS1__getWeatherbyCityNameResponse &WS1__getWeatherbyCityNameResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getWeatherbyCityName_(
    struct soap *soap,
    // input parameters:
    _WS1__getWeatherbyCityName*         WS1__getWeatherbyCityName,
    // output parameters:
    _WS1__getWeatherbyCityNameResponse &WS1__getWeatherbyCityNameResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getWeatherbyCityName_ SOAP
//gsoap WS1  service method-style:	getWeatherbyCityName_ document
//gsoap WS1  service method-encoding:	getWeatherbyCityName_ literal
//gsoap WS1  service method-input-action:	getWeatherbyCityName_ http://WebXml.com.cn/getWeatherbyCityName
//gsoap WS1  service method-output-action:	getWeatherbyCityName_ http://WebXml.com.cn/getWeatherbyCityNameResponse
int __WS1__getWeatherbyCityName_(
    _WS1__getWeatherbyCityName*         WS1__getWeatherbyCityName,	///< Input parameter
    _WS1__getWeatherbyCityNameResponse &WS1__getWeatherbyCityNameResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getWeatherbyCityNamePro_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getWeatherbyCityNamePro_" of service binding "WeatherWebServiceSoap".
<br><h3>For</h3><p>
getWeatherbyCityNametheUserID = ID</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing input action: "http://WebXml.com.cn/getWeatherbyCityNamePro"

  - Addressing output action: "http://WebXml.com.cn/getWeatherbyCityNameProResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getWeatherbyCityNamePro_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getWeatherbyCityNamePro*      WS1__getWeatherbyCityNamePro,
    // output parameters:
    _WS1__getWeatherbyCityNameProResponse&WS1__getWeatherbyCityNameProResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getWeatherbyCityNamePro_(
    struct soap *soap,
    // input parameters:
    _WS1__getWeatherbyCityNamePro*      WS1__getWeatherbyCityNamePro,
    // output parameters:
    _WS1__getWeatherbyCityNameProResponse&WS1__getWeatherbyCityNameProResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getWeatherbyCityNamePro_ SOAP
//gsoap WS1  service method-style:	getWeatherbyCityNamePro_ document
//gsoap WS1  service method-encoding:	getWeatherbyCityNamePro_ literal
//gsoap WS1  service method-input-action:	getWeatherbyCityNamePro_ http://WebXml.com.cn/getWeatherbyCityNamePro
//gsoap WS1  service method-output-action:	getWeatherbyCityNamePro_ http://WebXml.com.cn/getWeatherbyCityNameProResponse
int __WS1__getWeatherbyCityNamePro_(
    _WS1__getWeatherbyCityNamePro*      WS1__getWeatherbyCityNamePro,	///< Input parameter
    _WS1__getWeatherbyCityNameProResponse&WS1__getWeatherbyCityNameProResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getCountryCityByIp                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getCountryCityByIp" of service binding "WeatherWebServiceSoap".
<br /><h3>IP</h3><p>IP
" "  "." String(1)String(0)
= IPString(1) = </p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getCountryCityByIp"

  - Addressing input action: "http://WebXml.com.cn/getCountryCityByIp"

  - Addressing output action: "http://WebXml.com.cn/getCountryCityByIpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getCountryCityByIp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getCountryCityByIp*           WS1__getCountryCityByIp,
    // output parameters:
    _WS1__getCountryCityByIpResponse   &WS1__getCountryCityByIpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getCountryCityByIp(
    struct soap *soap,
    // input parameters:
    _WS1__getCountryCityByIp*           WS1__getCountryCityByIp,
    // output parameters:
    _WS1__getCountryCityByIpResponse   &WS1__getCountryCityByIpResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getCountryCityByIp SOAP
//gsoap WS1  service method-style:	getCountryCityByIp document
//gsoap WS1  service method-encoding:	getCountryCityByIp literal
//gsoap WS1  service method-input-action:	getCountryCityByIp http://WebXml.com.cn/getCountryCityByIp
//gsoap WS1  service method-output-action:	getCountryCityByIp http://WebXml.com.cn/getCountryCityByIpResponse
int __WS1__getCountryCityByIp(
    _WS1__getCountryCityByIp*           WS1__getCountryCityByIp,	///< Input parameter
    _WS1__getCountryCityByIpResponse   &WS1__getCountryCityByIpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getGeoIPContext                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getGeoIPContext" of service binding "WeatherWebServiceSoap".
<br /><h3>IP</h3><p>
String(1)String(0) = IPString(1) = </p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getGeoIPContext"

  - Addressing input action: "http://WebXml.com.cn/getGeoIPContext"

  - Addressing output action: "http://WebXml.com.cn/getGeoIPContextResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getGeoIPContext(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getGeoIPContext*              WS1__getGeoIPContext,
    // output parameters:
    _WS1__getGeoIPContextResponse      &WS1__getGeoIPContextResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getGeoIPContext(
    struct soap *soap,
    // input parameters:
    _WS1__getGeoIPContext*              WS1__getGeoIPContext,
    // output parameters:
    _WS1__getGeoIPContextResponse      &WS1__getGeoIPContextResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getGeoIPContext SOAP
//gsoap WS1  service method-style:	getGeoIPContext document
//gsoap WS1  service method-encoding:	getGeoIPContext literal
//gsoap WS1  service method-input-action:	getGeoIPContext http://WebXml.com.cn/getGeoIPContext
//gsoap WS1  service method-output-action:	getGeoIPContext http://WebXml.com.cn/getGeoIPContextResponse
int __WS1__getGeoIPContext(
    _WS1__getGeoIPContext*              WS1__getGeoIPContext,	///< Input parameter
    _WS1__getGeoIPContextResponse      &WS1__getGeoIPContextResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getVersionTime                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getVersionTime" of service binding "WeatherWebServiceSoap".
<br /><h3>IP WEB </h3><p>
String</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getVersionTime"

  - Addressing input action: "http://WebXml.com.cn/getVersionTime"

  - Addressing output action: "http://WebXml.com.cn/getVersionTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getVersionTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getVersionTime*               WS1__getVersionTime,
    // output parameters:
    _WS1__getVersionTimeResponse       &WS1__getVersionTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getVersionTime(
    struct soap *soap,
    // input parameters:
    _WS1__getVersionTime*               WS1__getVersionTime,
    // output parameters:
    _WS1__getVersionTimeResponse       &WS1__getVersionTimeResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getVersionTime SOAP
//gsoap WS1  service method-style:	getVersionTime document
//gsoap WS1  service method-encoding:	getVersionTime literal
//gsoap WS1  service method-input-action:	getVersionTime http://WebXml.com.cn/getVersionTime
//gsoap WS1  service method-output-action:	getVersionTime http://WebXml.com.cn/getVersionTimeResponse
int __WS1__getVersionTime(
    _WS1__getVersionTime*               WS1__getVersionTime,	///< Input parameter
    _WS1__getVersionTimeResponse       &WS1__getVersionTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getCountryCityByIp_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getCountryCityByIp_" of service binding "WeatherWebServiceSoap".
<br /><h3>IP</h3><p>IP
" "  "." String(1)String(0)
= IPString(1) = </p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getCountryCityByIp"

  - Addressing input action: "http://WebXml.com.cn/getCountryCityByIp"

  - Addressing output action: "http://WebXml.com.cn/getCountryCityByIpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getCountryCityByIp_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getCountryCityByIp*           WS1__getCountryCityByIp,
    // output parameters:
    _WS1__getCountryCityByIpResponse   &WS1__getCountryCityByIpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getCountryCityByIp_(
    struct soap *soap,
    // input parameters:
    _WS1__getCountryCityByIp*           WS1__getCountryCityByIp,
    // output parameters:
    _WS1__getCountryCityByIpResponse   &WS1__getCountryCityByIpResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getCountryCityByIp_ SOAP
//gsoap WS1  service method-style:	getCountryCityByIp_ document
//gsoap WS1  service method-encoding:	getCountryCityByIp_ literal
//gsoap WS1  service method-input-action:	getCountryCityByIp_ http://WebXml.com.cn/getCountryCityByIp
//gsoap WS1  service method-output-action:	getCountryCityByIp_ http://WebXml.com.cn/getCountryCityByIpResponse
int __WS1__getCountryCityByIp_(
    _WS1__getCountryCityByIp*           WS1__getCountryCityByIp,	///< Input parameter
    _WS1__getCountryCityByIpResponse   &WS1__getCountryCityByIpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getGeoIPContext_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getGeoIPContext_" of service binding "WeatherWebServiceSoap".
<br /><h3>IP</h3><p>
String(1)String(0) = IPString(1) = </p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getGeoIPContext"

  - Addressing input action: "http://WebXml.com.cn/getGeoIPContext"

  - Addressing output action: "http://WebXml.com.cn/getGeoIPContextResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getGeoIPContext_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getGeoIPContext*              WS1__getGeoIPContext,
    // output parameters:
    _WS1__getGeoIPContextResponse      &WS1__getGeoIPContextResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getGeoIPContext_(
    struct soap *soap,
    // input parameters:
    _WS1__getGeoIPContext*              WS1__getGeoIPContext,
    // output parameters:
    _WS1__getGeoIPContextResponse      &WS1__getGeoIPContextResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getGeoIPContext_ SOAP
//gsoap WS1  service method-style:	getGeoIPContext_ document
//gsoap WS1  service method-encoding:	getGeoIPContext_ literal
//gsoap WS1  service method-input-action:	getGeoIPContext_ http://WebXml.com.cn/getGeoIPContext
//gsoap WS1  service method-output-action:	getGeoIPContext_ http://WebXml.com.cn/getGeoIPContextResponse
int __WS1__getGeoIPContext_(
    _WS1__getGeoIPContext*              WS1__getGeoIPContext,	///< Input parameter
    _WS1__getGeoIPContextResponse      &WS1__getGeoIPContextResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __WS1__getVersionTime_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__WS1__getVersionTime_" of service binding "WeatherWebServiceSoap".
<br /><h3>IP WEB </h3><p>
String</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://www.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx
    - http://www.webxml.com.cn/WebServices/WeatherWebService.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getVersionTime"

  - Addressing input action: "http://WebXml.com.cn/getVersionTime"

  - Addressing output action: "http://WebXml.com.cn/getVersionTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___WS1__getVersionTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _WS1__getVersionTime*               WS1__getVersionTime,
    // output parameters:
    _WS1__getVersionTimeResponse       &WS1__getVersionTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __WS1__getVersionTime_(
    struct soap *soap,
    // input parameters:
    _WS1__getVersionTime*               WS1__getVersionTime,
    // output parameters:
    _WS1__getVersionTimeResponse       &WS1__getVersionTimeResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWebServiceSoapProxy.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWebServiceSoapService.h generated with soapcpp2):
@code
  class WeatherWebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap WS1  service method-protocol:	getVersionTime_ SOAP
//gsoap WS1  service method-style:	getVersionTime_ document
//gsoap WS1  service method-encoding:	getVersionTime_ literal
//gsoap WS1  service method-input-action:	getVersionTime_ http://WebXml.com.cn/getVersionTime
//gsoap WS1  service method-output-action:	getVersionTime_ http://WebXml.com.cn/getVersionTimeResponse
int __WS1__getVersionTime_(
    _WS1__getVersionTime*               WS1__getVersionTime,	///< Input parameter
    _WS1__getVersionTimeResponse       &WS1__getVersionTimeResponse	///< Output parameter
);

/**

@page WeatherWebServiceSoap Binding "WeatherWebServiceSoap"

@section WeatherWebServiceSoap_policy_enablers Policy Enablers of Binding "WeatherWebServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDL and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section WS1 Top-level root elements of schema "http://WebXml.com.cn/"

  - <WS1:getSupportCity> @ref _WS1__getSupportCity
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getSupportCity(struct soap*, _WS1__getSupportCity*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getSupportCity(struct soap*, _WS1__getSupportCity*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getSupportCity(struct soap*, const char *URL, _WS1__getSupportCity*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getSupportCity(struct soap*, const char *URL, _WS1__getSupportCity*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getSupportCity(struct soap*, const char *URL, _WS1__getSupportCity*);
    soap_POST_recv__WS1__getSupportCity(struct soap*, _WS1__getSupportCity*);
    @endcode

  - <WS1:getSupportCityResponse> @ref _WS1__getSupportCityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getSupportCityResponse(struct soap*, _WS1__getSupportCityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getSupportCityResponse(struct soap*, _WS1__getSupportCityResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getSupportCityResponse(struct soap*, const char *URL, _WS1__getSupportCityResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getSupportCityResponse(struct soap*, const char *URL, _WS1__getSupportCityResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getSupportCityResponse(struct soap*, const char *URL, _WS1__getSupportCityResponse*);
    soap_POST_recv__WS1__getSupportCityResponse(struct soap*, _WS1__getSupportCityResponse*);
    @endcode

  - <WS1:getSupportProvince> @ref _WS1__getSupportProvince
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getSupportProvince(struct soap*, _WS1__getSupportProvince*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getSupportProvince(struct soap*, _WS1__getSupportProvince*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getSupportProvince(struct soap*, const char *URL, _WS1__getSupportProvince*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getSupportProvince(struct soap*, const char *URL, _WS1__getSupportProvince*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getSupportProvince(struct soap*, const char *URL, _WS1__getSupportProvince*);
    soap_POST_recv__WS1__getSupportProvince(struct soap*, _WS1__getSupportProvince*);
    @endcode

  - <WS1:getSupportProvinceResponse> @ref _WS1__getSupportProvinceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getSupportProvinceResponse(struct soap*, _WS1__getSupportProvinceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getSupportProvinceResponse(struct soap*, _WS1__getSupportProvinceResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getSupportProvinceResponse(struct soap*, const char *URL, _WS1__getSupportProvinceResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getSupportProvinceResponse(struct soap*, const char *URL, _WS1__getSupportProvinceResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getSupportProvinceResponse(struct soap*, const char *URL, _WS1__getSupportProvinceResponse*);
    soap_POST_recv__WS1__getSupportProvinceResponse(struct soap*, _WS1__getSupportProvinceResponse*);
    @endcode

  - <WS1:getSupportDataSet> @ref _WS1__getSupportDataSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getSupportDataSet(struct soap*, _WS1__getSupportDataSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getSupportDataSet(struct soap*, _WS1__getSupportDataSet*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getSupportDataSet(struct soap*, const char *URL, _WS1__getSupportDataSet*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getSupportDataSet(struct soap*, const char *URL, _WS1__getSupportDataSet*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getSupportDataSet(struct soap*, const char *URL, _WS1__getSupportDataSet*);
    soap_POST_recv__WS1__getSupportDataSet(struct soap*, _WS1__getSupportDataSet*);
    @endcode

  - <WS1:getSupportDataSetResponse> @ref _WS1__getSupportDataSetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getSupportDataSetResponse(struct soap*, _WS1__getSupportDataSetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getSupportDataSetResponse(struct soap*, _WS1__getSupportDataSetResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getSupportDataSetResponse(struct soap*, const char *URL, _WS1__getSupportDataSetResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getSupportDataSetResponse(struct soap*, const char *URL, _WS1__getSupportDataSetResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getSupportDataSetResponse(struct soap*, const char *URL, _WS1__getSupportDataSetResponse*);
    soap_POST_recv__WS1__getSupportDataSetResponse(struct soap*, _WS1__getSupportDataSetResponse*);
    @endcode

  - <WS1:getWeatherbyCityName> @ref _WS1__getWeatherbyCityName
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getWeatherbyCityName(struct soap*, _WS1__getWeatherbyCityName*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getWeatherbyCityName(struct soap*, _WS1__getWeatherbyCityName*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getWeatherbyCityName(struct soap*, const char *URL, _WS1__getWeatherbyCityName*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getWeatherbyCityName(struct soap*, const char *URL, _WS1__getWeatherbyCityName*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getWeatherbyCityName(struct soap*, const char *URL, _WS1__getWeatherbyCityName*);
    soap_POST_recv__WS1__getWeatherbyCityName(struct soap*, _WS1__getWeatherbyCityName*);
    @endcode

  - <WS1:getWeatherbyCityNameResponse> @ref _WS1__getWeatherbyCityNameResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getWeatherbyCityNameResponse(struct soap*, _WS1__getWeatherbyCityNameResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getWeatherbyCityNameResponse(struct soap*, _WS1__getWeatherbyCityNameResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getWeatherbyCityNameResponse(struct soap*, const char *URL, _WS1__getWeatherbyCityNameResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getWeatherbyCityNameResponse(struct soap*, const char *URL, _WS1__getWeatherbyCityNameResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getWeatherbyCityNameResponse(struct soap*, const char *URL, _WS1__getWeatherbyCityNameResponse*);
    soap_POST_recv__WS1__getWeatherbyCityNameResponse(struct soap*, _WS1__getWeatherbyCityNameResponse*);
    @endcode

  - <WS1:getWeatherbyCityNamePro> @ref _WS1__getWeatherbyCityNamePro
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getWeatherbyCityNamePro(struct soap*, _WS1__getWeatherbyCityNamePro*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getWeatherbyCityNamePro(struct soap*, _WS1__getWeatherbyCityNamePro*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getWeatherbyCityNamePro(struct soap*, const char *URL, _WS1__getWeatherbyCityNamePro*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getWeatherbyCityNamePro(struct soap*, const char *URL, _WS1__getWeatherbyCityNamePro*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getWeatherbyCityNamePro(struct soap*, const char *URL, _WS1__getWeatherbyCityNamePro*);
    soap_POST_recv__WS1__getWeatherbyCityNamePro(struct soap*, _WS1__getWeatherbyCityNamePro*);
    @endcode

  - <WS1:getWeatherbyCityNameProResponse> @ref _WS1__getWeatherbyCityNameProResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getWeatherbyCityNameProResponse(struct soap*, _WS1__getWeatherbyCityNameProResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getWeatherbyCityNameProResponse(struct soap*, _WS1__getWeatherbyCityNameProResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getWeatherbyCityNameProResponse(struct soap*, const char *URL, _WS1__getWeatherbyCityNameProResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getWeatherbyCityNameProResponse(struct soap*, const char *URL, _WS1__getWeatherbyCityNameProResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getWeatherbyCityNameProResponse(struct soap*, const char *URL, _WS1__getWeatherbyCityNameProResponse*);
    soap_POST_recv__WS1__getWeatherbyCityNameProResponse(struct soap*, _WS1__getWeatherbyCityNameProResponse*);
    @endcode

  - <WS1:ArrayOfString> (use wsdl2h option -g to auto-generate type _WS1__ArrayOfString)

  - <WS1:DataSet> @ref _WS1__DataSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__DataSet(struct soap*, _WS1__DataSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__DataSet(struct soap*, _WS1__DataSet*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__DataSet(struct soap*, const char *URL, _WS1__DataSet*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__DataSet(struct soap*, const char *URL, _WS1__DataSet*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__DataSet(struct soap*, const char *URL, _WS1__DataSet*);
    soap_POST_recv__WS1__DataSet(struct soap*, _WS1__DataSet*);
    @endcode

  - <WS1:getCountryCityByIp> @ref _WS1__getCountryCityByIp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getCountryCityByIp(struct soap*, _WS1__getCountryCityByIp*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getCountryCityByIp(struct soap*, _WS1__getCountryCityByIp*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getCountryCityByIp(struct soap*, const char *URL, _WS1__getCountryCityByIp*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getCountryCityByIp(struct soap*, const char *URL, _WS1__getCountryCityByIp*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getCountryCityByIp(struct soap*, const char *URL, _WS1__getCountryCityByIp*);
    soap_POST_recv__WS1__getCountryCityByIp(struct soap*, _WS1__getCountryCityByIp*);
    @endcode

  - <WS1:getCountryCityByIpResponse> @ref _WS1__getCountryCityByIpResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getCountryCityByIpResponse(struct soap*, _WS1__getCountryCityByIpResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getCountryCityByIpResponse(struct soap*, _WS1__getCountryCityByIpResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getCountryCityByIpResponse(struct soap*, const char *URL, _WS1__getCountryCityByIpResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getCountryCityByIpResponse(struct soap*, const char *URL, _WS1__getCountryCityByIpResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getCountryCityByIpResponse(struct soap*, const char *URL, _WS1__getCountryCityByIpResponse*);
    soap_POST_recv__WS1__getCountryCityByIpResponse(struct soap*, _WS1__getCountryCityByIpResponse*);
    @endcode

  - <WS1:getGeoIPContext> @ref _WS1__getGeoIPContext
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getGeoIPContext(struct soap*, _WS1__getGeoIPContext*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getGeoIPContext(struct soap*, _WS1__getGeoIPContext*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getGeoIPContext(struct soap*, const char *URL, _WS1__getGeoIPContext*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getGeoIPContext(struct soap*, const char *URL, _WS1__getGeoIPContext*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getGeoIPContext(struct soap*, const char *URL, _WS1__getGeoIPContext*);
    soap_POST_recv__WS1__getGeoIPContext(struct soap*, _WS1__getGeoIPContext*);
    @endcode

  - <WS1:getGeoIPContextResponse> @ref _WS1__getGeoIPContextResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getGeoIPContextResponse(struct soap*, _WS1__getGeoIPContextResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getGeoIPContextResponse(struct soap*, _WS1__getGeoIPContextResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getGeoIPContextResponse(struct soap*, const char *URL, _WS1__getGeoIPContextResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getGeoIPContextResponse(struct soap*, const char *URL, _WS1__getGeoIPContextResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getGeoIPContextResponse(struct soap*, const char *URL, _WS1__getGeoIPContextResponse*);
    soap_POST_recv__WS1__getGeoIPContextResponse(struct soap*, _WS1__getGeoIPContextResponse*);
    @endcode

  - <WS1:getVersionTime> @ref _WS1__getVersionTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getVersionTime(struct soap*, _WS1__getVersionTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getVersionTime(struct soap*, _WS1__getVersionTime*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getVersionTime(struct soap*, const char *URL, _WS1__getVersionTime*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getVersionTime(struct soap*, const char *URL, _WS1__getVersionTime*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getVersionTime(struct soap*, const char *URL, _WS1__getVersionTime*);
    soap_POST_recv__WS1__getVersionTime(struct soap*, _WS1__getVersionTime*);
    @endcode

  - <WS1:getVersionTimeResponse> @ref _WS1__getVersionTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WS1__getVersionTimeResponse(struct soap*, _WS1__getVersionTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WS1__getVersionTimeResponse(struct soap*, _WS1__getVersionTimeResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__WS1__getVersionTimeResponse(struct soap*, const char *URL, _WS1__getVersionTimeResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__WS1__getVersionTimeResponse(struct soap*, const char *URL, _WS1__getVersionTimeResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__WS1__getVersionTimeResponse(struct soap*, const char *URL, _WS1__getVersionTimeResponse*);
    soap_POST_recv__WS1__getVersionTimeResponse(struct soap*, _WS1__getVersionTimeResponse*);
    @endcode

  - <WS1:string> (use wsdl2h option -g to auto-generate type _WS1__string)

*/

/* End of weather.h */
